What is Nodejs ?
=> Nodejs is a javascript runtime built on chorme v8 javascript engine
=> Nodejs allow you to run javascript on the server
=> Nodejs provides library of various javascript modules which help to develop web application
=> Developed by Ryan Dahl in 2009
=> Nodejs is not a framework or language
=> can be used frontend or backend develop web application
=>  Node. js is a server-side scripting language based on the Google Chrome V8 engine.
=> Fast and highly scalable and efficient.

1. Basic Commands
=> .break : sometiems you get stuck this get you out
=> .clear : alias for .break
=> .editor : Enter editor mode (Ctrl+D to finish, Ctrl+C to cancel).
=> .exit : Exit the REPL  (Read-Eval-Print-Loop : run js file on terminal through node js) 
=> .help : print this help message
=> .load : Load JS from a file intot he REPL session e.g. load./file/to/load.js
=> .save : save all evaluated terminal commands in this REPL session to file e.g. .save/file/to/save.js

2. npm init :  created a file named package.json 
{
  "name": "nodejs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
	2.1 npm init -y : mean that previous created same previous init(package.json) 

3. Module Wrapper : Before the module's code is executed, node js will auto wrap it with a below function that look likes following: 
(function(exports, require, module, __filename, __dirname){// Module or node js code actually live in here});
=> exports - A refernce to the module.exports that is shorter to type
=> requrie - Used to import modules
=> module - A refernce to the current module , console.log(module) / 
=> __dirname - Return the directory name of current module console.log(__dirname)
=> __filename - return the current file name

4. Path :  The path module provides utilites for working with file and directory paths, it can be access using const = path  require('path')
=> const path= require('path'); // require to access all below path;
	4.1 basename()- return the last portion of current path/folderName/directoryName 
		console.log(path.basename('C:/xampp/htdocs/NodeJS')) // return NodeJS
		console.log(path.basename(__filename, '.js')) // return only file name without extension
	4.2 path.dirname('C:/xampp/htdocs/NodeJS') return directory C:/xampp/htdocs
	4.3 path.extname('index.js') return extension of file .js, if there is no extension in file, string will be return null or ''
	4.4 path.join('sajid/','hello//', 'index.js') return sajid/hello/index.js
	5.5 path.normalize('C:/\/xampp///sajid/docs') return C:\xampp\sajid\docs
		5.5.1 C:\xampp\sajid\docs
	5.6 path.parse(__filename) 
return : 
{
  root: 'C:\\',
  dir: 'C:\\xampp\\htdocs\\NodeJS',
  base: 'index.js',
  ext: '.js',
  name: 'index'
}
		5.6.1 path.parse(__filename).base return last folder or filename 

	5.7 path.isAbsolute() : check path is valid or not 
path.isAbsolute('//server')// ture
path.isAbsolute('//\//server/server')// ture
path.isAbsolute('.')// false
path.isAbsolute('bar\\baz')// false
path.isAbsolute('C:/search/sajid')// ture
path.isAbsolute('search/sajid')// false


6. File System : The fs module enables interacting with the file system in a way modeled on standard POSIX (Portable Operating System Interface) function
=> npm init and update package.json file with "type":"module" for use keyword import 
=> Asynchronous : Its allows the program to be executed immediately  
=> Synchronous :   Where the synchronous code will block further execution of the remaining code until it finishes 
=> {recursive:true} : path is not reqiure to be there and error message will not appear..
	6.1 Promise Based API: ths fs/promises API provides asynchronous file system methods that return promies
	=> const fs = require ('fs/promises');
	=> import * as fs from 'fs/promises' will be use below said all function/method...
		6.1.1 mkdir(path,[options);
			try {
 				 await fs.mkdir('C:\\xampp\\htdocs\\NodeJS\\SAJID', {recursive:true});
				 console.log("directory created");
			}catch(error){
				  console.log(error);

			 }
		6.1.2 readir(path,[option]) // read  direcotry the contain 
		6.1.3 rmdir(path,[option]) // remove directory
		6.1.4 writeFile() - writes data to a file, replacing the file if it already exits
			Syntax : writeFile(fileName/directoryfile, dataTExt, [options])
		6.1.5 readFile(path,[option]) - read file entire contains of file
		6.1.6 appendFile(path, data, [option])- append data to file , if file does not exits it will create an file
		6.1.7 copyFile(getfileCopyDatapath,PasteDatapath, [option]); // copy a file to another folder file
		6.1.8 stat(path, [option]) - used to get file information
			const stats = await fs.stat('C:\\xampp\\htdocs\\NodeJS');
			stats.isDirectory()//  return true
			stats.isFile()// return false  because in nodejs folder we did not file path with file
			
	6.2 Callback API : The callback APIs all operation asynchronously, without blocking the event loop, then invoke a callback function upon completion or error;
	=> const fs = require('fs');
	=> import * as fs from 'fs';
		6.2.1  fs.mkdir();
		fs.mkdir('C:\\xampp\\htdocs\\NodeJS', {recursive:true}, function(){
			if(error) throw error;
			 console.log("directory created");
		}) or 

		fs.mkdir('C:\\xampp\\htdocs\\NodeJS', {recursive:true}, ()=>{
			if(error) throw error;
			 console.log("directory created");
		})

	=> Now All Method will be called above said Promise Based API, as per above said first Callback syntax 

	6.3 Sync API : blocking the event if any error occured
	=> const fs = require('fs');
	=> import * as fs from 'fs';
	=> Everything is same like tha Promise Based API
	=> But After all method name you have to "Synx" keyword" Example : readFileSync(path,[option]), mkdirSync(path,[option]), writeFileSync("filename","fileText") etc.	
		
	