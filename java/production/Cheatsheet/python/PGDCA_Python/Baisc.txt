Note - Some information on included yet
    => COLLECTION  EXPLAINANTION NOT INCLUDE
    => LAMBDA NOT UNDERSTAND
    => BITWIS OPERATOR NOT UNDERSTAND
    => Matplotlib
    => MongoDB
    => Some Python Modules

1. Introduction
    => It was created by Guido van Rossum, and released in 1991.
    => It is used for: web development (server-side), software development, mathematics, system scripting.
        1.1 What can Python do ?
            - Python can be used on a server to create web applications.
            - Python can be used for rapid prototyping, or for production-ready software development.
            - create database and delete and modify
            - handle the  big data and perform complex mathematics.
          1.2 Why Python?
            - Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
            - Python has a simple syntax similar to the English language.
            - Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
            - Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
    => Python uses new lines to complete a command, as compare to other programming language its used semicolans and parantheses to complete line
2. Installation
    	i. if u have installed choco via administration via window shell :  choco install python --version=3.8.0
    	ii. install mannually  : https://www.python.org/downloads
    	iii. or otherwise you can test your program online :
    		=> https://www.w3schools.com/python/trypython.asp?filename=demo_variables_cs
    		=> https://colab.research.google.com/notebooks/welcome.ipynb
3. Run Python
    => open cmd prompt and check version of python via command : python --version
    => Lets print our hello world type command in cmd prompt : py and then : print("Hello World");
    => So ALl times you cant use cmd prompt, lets install the pycharm ide from web https://www.jetbrains.com/pycharm/

4. Python Comment
   	i. single line comment : #I am comment
   	ii. multiple line comment just added triple quotes  : """
   								This is a comment
   								written in
   								more than just one line
   							      """
5. Variables
   	i. Variable names are case-sensitive.
   	Example : a = 4
   		    A = "Sally" #A will not overwrite to a variable
   	ii. Variable name can not start with digit numeric
   	iii. Multlple Variable
   		x, y, z = "Orange", "Banana", "Cherry"
   		Note :  Make sure the number of variables matches the number of values, or else you will get an error.
   		=> One value to multiple variable Example : x = y = z = "Orange"
   	iv. Unpack Collection : Python allows you to extract the values into variables  fruits = ["apple", "banana", "cherry"]; x, y, z = fruits
   	v. use global keyword inside of function and thats can be used outside of function; Ex:  def myfunc():
   												  global x
   												  x = "fantastic"

   	=> Python Reserve Keywords can not use as variable
   	    and, async, not, assert, finally,or,break,for,pass,class,from, nonlocal,continue,global,raise,def, import,while, try, elif, in, try else, is, with, except, lambad, yield, false, tru, none, del, if return, as, await6.

6. Operators
    6.1 Arithmetic
        => +, -,*, /, %,
        => ** : print(2 ** 5) #same as 2*2*2*2*2
        => % : print(5 % 2) #result 1
        => // : print(15 // 2) #result 7 -> the result down to the nearest whole number
    6.2 Assignment Operators
        => =, +, -,*, /, %, **, %, // #	x **= 3	same as x = x ** 3
    6.3 Comparison Operators -  boolean result
        => ==, !=, >, <,
        => >= : x >= y #Greater than or equal to
        => <= : x <= y	 Less than or equal to
    6.4 Logical Operator -  given boolean result
        i. and : x < 5 and  x < 10 #return true if both statement is true
        ii. or : x < 5 or  x < 10 #return true if one of the statement is true
        iii. not : not(x < 5 and x < 10) : result reverse

    6.5 Identity Operators - compare the object
        i. is : x is y #return true if both are same object
        ii. is not : x is not y #return true if both are not same object

    6.6 Membership Operator - test the sequence is present in the object/array
       i. in : x in y #return true if x's a sequance value is presence in the y object
       ii. not in : #return true if x sequance value is not presence in the y object

    6.7 Bitwise Operators - used to compare (binary) numbers:
        => &, |, ^, ~, <<,  >>
        6.7.1 Understand the Binary System
            i. Decimal Number System
              Lets a number : 1234
                1000(thousand)  100(hundred)    10(ten)       1(one)
                  1               2               3             4
                10power3       10power2         10power1     10power0
                1*1000 + 2*100 + 3*10 + 4*1 = 1234
                1*10power + 2*10power2 + 3*10power1 + 4*10power0 = 1234
            ii. Binary Number System
                => Its taking always base showing as 2
                 32          16          8          4        2          1
                 2power5    2power4     2power3    2power2  2power1 2power0
                => Lets taking number 45 = 1*32 + 0*16 + 1*8 + 1*4 + 0*2 + 1*1 = 45
                    note : 0*16, 0*2 not taking because if we take its become more than 45
                   Now Our Binary System is 101101
                  Or
                  45/2;22 and remainder is 1, 22/2;11 = 0, 11/2;5 = 1, 5/2;2=1, 2/2;1 = 0, 1/2;0 = 1; Binary 101101
            iii. Decimal to Binary

7. Data Types
    => Check datatype of any variable : type(variableName)
        i. Text Type:	str
        ii. Numeric Types:	int, float,  iii. complex its write by j   x = 3+5j; print(x); output : 3+5j;
        iii. Sequence Types:	 i. list = ["apple", "banana", "cherry"] ii.  tuple =("apple", "banana", "cherry") iii.  range =  range(6)
        iv. Mapping Type:	dict = {"name" : "John", "age" : 36}
        v. Set Types:	i. set  = {"apple", "banana", "cherry"}  ii. frozenset = {"name" : "John", "age" : 36}
        vi. Boolean Type:	bool
        vii. Binary Types:	i. bytes = b'hello', ii. bytearray =  bytearray(5) #output : bytearray(b'\x00'), iii. memoryview = memoryview(bytes(5)) #not understand
        viii. None Type:	NoneType
   	i. check datatype of variable using; type(variable_name)
   	Example : import random;  print(random.randrange(1, 10)) #output....
   	7.1. String
   		1.1 Multiple line string
   		    a = '''Lorem ipsum dolor sit amet,
   			consectetur adipiscing elit,
   			sed do eiusmod tempor incididunt
   			ut labore et dolore magna aliqua.'''
   		1.2 String as Array
   			 a = "Hello, World!"; print(a[1]) #output : e
   			or for x in a: print(x)
   			i. len(a) // return length 13
   			ii. check hello is present in : "Hello" in txt # output: true
   			iii. check hello is not present : "expensive" not in txt #output true
   		=> Learn more string method here : https://www.w3schools.com/python/python_strings_slicing.asp

    7.2 List
    -> create : mylist = ["apple", "banana", "cherry"]
        => sort ordered, changeable, and allow duplicate values.
        => its start from index 0
        => len(mylist) #result 3; print number of items
        => type(mylist) #get data type result will -> < class 'list' >
        => thislist = list(("apple", "banana", "cherry")) # note the double round-brackets mean calling the list constructor
        => Python Collections (Arrays)
            i. List :  ordered and changeable. Allows duplicate members.
            ii. Tuple  :  ordered and unchangeable but you can remove and/or add items and  Allows duplicate members.
            iii. Set :  unordered, unchangeable*, and unindexed. No duplicate members.
            iv. Dictionary :  ordered** and changeable. No duplicate members.
                Note - **As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

            7.2.1 Access Item
                => mylist[1] #print banana
                => mylist[-1] #print cherry; because Negative indexing means start from the end
                => mylist[1:2] #print ["banana", "cherry"] 1 to 2 index items
                => mylist[:2] #return items starting 2 items to end
                => mylist[1:] #return items starting from 0 to 1
                => if "apple" in thislist: print("Exist") #return print if apple is in the list
            7.2.2 Change List Item
                => mylist[1] = "blackcurrant"
                Learn More  - https://www.w3schools.com/python/python_lists_change.asp

            7.2.2 Touple
                => Tuples are written with round brackets.
                => Tuples are used to store multiple items in a single variable.
                => Its ordered and unchangeable.
                => tuple(("apple", "banana", "cherry")) #tuple constructor
                => All methods like access touple delete touple like list collection
              Learn More Deeply - https://www.w3schools.com/python/python_tuples_access.asp

8. Statements
    8.1 If Statement
        Example : a = 33
                  b = 200
                  if b > a:
                    print("b is greater than a")
    8.2 While
      Ex 1. i = 1
           while i < 6:
             print(i)
             if i == 3:
               break
             i += 1
      Ex 2. i = 0
             while i < 6:
               i += 1
               if i == 3:
                 continue
               print(i)
    8.3 For Loop
       Ex 1. fruits = ["apple", "banana", "cherry"]
            for x in fruits:
              print(x)
       Ex 2. for x in "banana":
               print(x)
       Ex 3. fruits = ["apple", "banana", "cherry"]
            for x in fruits:
              print(x)
              if x == "banana":
                break
       Ex 4. fruits = ["apple", "banana", "cherry"]
             for x in fruits:
               if x == "banana":
                 continue
               print(x)
       Ex. 5.  for x in range(6):
                 print(x) #print 0 1 2 3 4 5 6
                 # or  range(2, 6) or range(2, 30, 3) 3 is increment by 3

       Ex. 6. for x in range(6):
                if x == 3: break
                print(x)
              else:
                print("Finally finished!")
        Ex. 7 Nested Loop
                adj = ["red", "big", "tasty"]
                fruits = ["apple", "banana", "cherry"]
                for x in adj:
                  for y in fruits:
                    print(x, y)
       Ex. 8  for x in [0, 1, 2]:
               pass #pass keyword used for not display error if x is empty



9. Function
    => Define a function use the <def> keyword
    Ex 1. calling the function ;
          def my_function():
            print("Hello from a function")
          my_function()
    Ex 2. Parameter and arguments
        def my_function(fname, lname):
          print(fname + " " + lname)
        my_function("Emil", "Refsnes")
    Ex 3. Pass Multiple Arguments or Arbitrary Arguments
        => this is assumed a tuple of arguments, and can access the items accordingly:
        def my_function(*kids):
          print("The youngest child is " + kids[2])
        my_function("Emil", "Tobias", "Linus")

    Ex 4. Keywords Arguments
        def my_function(child3, child2, child1):
          print("The youngest child is " + child3)
        my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

   Ex 5. Multiple Argument with keyword arguments or Arbitrary Keyword Arguments, **kwargs
        => this is assumed dictionary of arguments, and can access the items accordingly:
       def my_function(**kid):
         print("His last name is " + kid["lname"])

       my_function(fname = "Tobias", lname = "Refsnes")
   Ex 6. Passing the List as arguments
        def my_function(food):
          for x in food:
            print(x)
        fruits = ["apple", "banana", "cherry"]
        my_function(fruits)

   Ex 7. Recursion
    => its mean function can call itself.
        def tri_recursion(k):
          if(k > 0):
            result = k + tri_recursion(k - 1)
            print(result)
          else:
            result = 0
          return result
        print("\n\nRecursion Example Results")
        tri_recursion(6) #output : Recursion Example Results  1 3 6 10 15 21


10. Lambda Function
    => A lambda function is a small anonymous function.
    => A lambda function can take any number of arguments, but can only have one expression.
    Ex 1. x = lambda a, b, c : a + b + c
          print(x(5, 6, 2))
        Learn More https://www.w3schools.com/python/python_lambda.asp
11. Array
    => here is LISTS as ARRAYS, however, to work with arrays in Python you will have to import a library, like the NumPy library    .
    => Define as array :  cars = ["Ford", "Volvo", "BMW"]
    => Eeach items print for x in cars: print(x)
    => cars.append("Honda") # append honda to array
    => cars.pop(1) # remove index 1 items from cars arrray
    => cars.remove("Volvo") #remove specific value from cars array
        Learn More Array Method go  - https://www.w3schools.com/python/python_arrays.asp -> scroll to bottom

12. Classes/Objects
    => Python is an object oriented programming language.
    => The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.
    => Examples
        Ex 1.
            class Person:
              def __init__(self, name, age):
                self.name = name
                self.age = age

            p1 = Person("John", 36)
            print(p1.name)
            print(p1.age)

        Ex 2. __str__ : return an string
               class Person:
                 def __init__(self, name, age):
                   self.name = name
                   self.age = age

                 def __str__(self):
                   return f"{self.name}({self.age})"

               p1 = Person("John", 36)
               print(p1) #<output> John(36)

       Ex 3. used of methods in class
            class Person:
              def __init__(self, name, age):
                self.name = name
                self.age = age

              def myfunc(self):
                print("Hello my name is " + self.name)

            p1 = Person("John", 36)
            p1.myfunc() #<method><output> Hello my name is John

       Ex 4. modify class properties and delete of properties and objects
            class Person:
              def __init__(self, name, age):
                self.name = name
                self.age = age

              def myfunc(self):
                print("Hello my name is " + self.name)

            p1 = Person("John", 36)
            del p1.age
            print(p1.age)

       Ex 5. class definitions can not be empty, if empty used pass keywords to avoid error
                class Person:
                  pass

13. Inheritance
    => Parent class is the class being inherited from, also called base class.
    => Child class is the class that inherits from another class, also called derived class.
    => Derived Class can access parent class all properites and methods.
    => Examples
        Ex 1.
            class Person: #class student inherited to Parent Class
              def __init__(self, fname, lname):
                self.firstname = fname
                self.lastname = lname

              def printname(self):
                print(self.firstname, self.lastname)

            class Student(Person): # derived/child class
              pass #passed keyword because we wont define any properites and method and avoid to errors

            x = Student("Mike", "Olsen")
            x.printname()

        Ex 2. __init__() : called init function in child class then no longer to access/inherit's parent class __init__ function
                               And override parent int function whenever you call  derived class init function

               -> To Keep parents init function so call class like below : -
                class Person:
                  def __init__(self, fname, lname):
                    self.firstname = fname
                    self.lastname = lname

                  def printname(self):
                    print(self.firstname, self.lastname)

                class Student(Person):
                  def __init__(self, fname, lname):
                    Person.__init__(self, fname, lname) #calling parents class init function

                x = Student("Mike", "Olsen")
                x.printname()

        Ex 3. super() : access the child method/properties from parents class
            class Person: #class define
              def __init__(self, fname, lname):
                self.firstname = fname
                self.lastname = lname

              def printname(self):
                print(self.firstname, self.lastname)

            class Student(Person): #child class inherition to parent class
              def __init__(self, fname, lname, year):
                super().__init__(fname, lname) # for access the properties and method of parent class
                self.graduationyear = year # declare properties

              def welcome(self): #delcare methods
                print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)

            x = Student("Mike", "Olsen", 2019) #initlize the object
            x.welcome()  # calling the method

14.  Iterators
    => An iterator is an object that contains a countable number of values.
    => Examples
        Ex 1. mytuple = ("apple", "banana", "cherry") or #try mystr = "banana"
              myit = iter(mytuple)

              print(next(myit)) #<output>apple
              print(next(myit)) #<output>banana
              print(next(myit)) #<output>cherry
        Ex 2. Class Method
            class MyNumbers:
              def __iter__(self):
                self.a = 1
                return self

              def __next__(self):
                x = self.a
                self.a += 1
                return x

            myclass = MyNumbers()
            myiter = iter(myclass)
            print(next(myiter)) #<output> 1
            print(next(myiter)) #<output> 2
            print(next(myiter)) #<output> 3

        Ex 3 .
            class MyNumbers:
              def __iter__(self):
                self.a = 1
                return self

              def __next__(self):
                if self.a <= 20:
                  x = self.a
                  self.a += 1
                  return x
                else:
                  raise StopIteration

            myclass = MyNumbers()
            myiter = iter(myclass)
            for x in myiter:
              print(x)

15. Scope
    15.1 Local Variable
        => Whose the variable declared the inside of function
        => Its can no access the outside of function
            Ex 1.
                def myfun():
                    x = 10
                    print(x)
        => If you want to access the variable outside of function use the global keyword
            Ex 2.
                def myfun():
                    global x = 10
                    print(x)

                myfun()
                print(x)

    15.2 Global Variable
        => variable will declared outside of function
        => can access from inside of function
        Ex 1.
            x = 10;
            def myfun():
                print(x)

            myfun()
            print(x)
16. Modules
    => Consider a module to be the same as a code library there is in predefined code, thats can be used in any python filed
    => Step to create & Used modules
        1. create file filename.py
        2. write the code below said :
            def sum(a,b){
                print(a+b)
            }
            person1 = {
              "name": "John",
              "age": 36,
              "country": "Norway"
            }
        4. Used the module in another python file
            import filname
            sum = filname.sum(a+b)
            personName = filename.person1["name"]
             print(sum)
             print(personName)

     Ex 1. Named the Module
             import filname as myModule
                sum = myModule.sum(a+b)
                personName = myModule.person1["name"]
                 print(sum)
                 print(personName)
     Ex 2. Built in Modules name
            import platform
            x = dir(platform) # return all  method/function name define in platform module file
            x = platform.system() # return system like window, phone, mac etc.
            print(x)

    Ex 3. Import only function/some part of module
            from filname import sum
            print (sum(a+b)) #don not used sum.person1, its access only sum by itself
16 Dates
    => import datetime - for access datetime method/function etc.
        Ex 1. x = datetime.datetime.now()
              print(x) #<output> 2022-11-09 22:58:46.081776
              print(x.year) #<output> current year
              print(x.strftime("%A")) #<output>  day name - monday, tuseday etc.

        Ex 2. Create a Date Object
                x = datetime.datetime(2020, 5, 17)
                print(x) #<output> 2020-05-17 00:00:00

        Ex 4. used strftime() method for format the date
                print(x.strftime("%B")) <#output> Month
        Learn More reference Format - https://www.w3schools.com/python/python_datetime.asp


17. Math
    => built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.
    Ex 1. x = min(5, 10, 25)
          y = max(5, 10, 25)
          print(x)
          print(y)
          print(abs(-7.25)) #return positive number
          print(pow(4, 3)) #same as 4 * 4 * 4 or 4 power 3
    Ex 2. import math
        print(math.sqrt(64)) #return 8
        print(math.ceil(1.4)) #return 2
        print(math.floor(1.4)) #return 1
        print(math.pi) #return 3.14
    Learn More Math Module method - https://www.w3schools.com/python/module_math.asp

18. JSON
    => JSON is a syntax for storing and exchanging data.
    => JSON is text, written with JavaScript object notation.

    Ex 1. Convert json to python
            import json
            x = '{ "name":"John", "age":30, "city":"New York"}'
            y = json.loads(x)
            print(x) # the result is a Python dictionary:
    Ex 2. python to json
        # a Python object (dict):
        x = { "name": "John", "age": 30, "city": "New York" }
        print(y = json.dumps(x)) #converinto json
        #convert any type data type of python to json string
        print(json.dumps(["apple", "bananas"]))
    Ex 4. Pretty Viewer Json
        x = {  "name": "John", "age": 30, "married": True, "divorced": False, "children": ("Ann","Billy"),"pets": None,
          "cars": [
            {"model": "BMW 230", "mpg": 27.5},
            {"model": "Ford Edge", "mpg": 24.1}
          ]
        }
        print(json.dumps(x, indent=1))
        json.dumps(x, indent=4, sort_keys=True) #order of result a to z format

19. Regular Expression
    => A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.
    => RegEx can be used to check if a string contains the specified search pattern.
    => Import the re module to use RegEx in python
    => Examples
        Ex 1. #Search the string to see if it starts with "The" and ends with "Spain":
              import re
              txt = "The rain in Spain"
              x = re.search("^The.*Spain$", txt)
          Learn More RegEx Function visit- https://www.w3schools.com/python/python_regex.asp and go to bottom


20. PIP
    => PIP is a package manager for Python packages, or modules if you like.
    => if u globally installed python in computer Check PIP installed or not command : pip --version or
        Otherwise open cmd to navigate  C:\Users\Your Name\AppData\Local\Programs\Python\Python36-32\Scripts>pip --version

    20.1 Basic Command Line-
        i. pip install camelcase
        ii.  pip uninstall camelcase
        iii. pip list <list the all installed pakcage>
        v.

    Ex 1. run cmd -  pip install camelcase
        import camelcase
        c = camelcase.CamelCase()
        print(c.hump("hello world"))

21. Error Handling
    Ex 1. try block
        try:
          print(x) #x variable is not defined,
        except:
          print("An exception occurred")  #<output> ....
      Ex 2. Many Exception, Define Custom Error
            try:
              print(x)
            except NameError:
              print("Variable x is not defined")
            except:
              print("Something else went wrong")
      Ex 2. Try block with else - else statement will print if no error found
            try:
              print("Hello")
            except:
              print("Something went wrong")
            else:
              print("Nothing went wrong") #<output>
       Ex 3. finally - always print if error raise or not
            try:
              print(x)
            except:
              print("Something went wrong")  #<output if error>  Something went wrong
            finally:
              print("The 'try except' is finished") <output always print> The 'try except' is finished
              Ex 3.1
                  try:
                    f = open("demofile.txt")
                    try:
                      f.write("Lorum Ipsum")
                    except:
                      print("Something went wrong when writing to the file")
                    finally:
                      f.close()
                  except:
                    print("Something went wrong when opening the file")
       21.2 Raise an exception with python standard like error
            => Examples
                Ex 1. x = -1
                      if x < 0:
                        raise Exception("Sorry, no numbers below zero")
                    #<output>
                        Traceback (most recent call last):
                          File "demo_ref_keyword_raise.py", line 4, in <module>
                            raise Exception("Sorry, no numbers below zero")
                        Exception: Sorry, no numbers below zero
                    #<end-output>

                Ex 2. Raise a TypeError
                    x = "hello"
                    if not type(x) is int:
                      raise TypeError("Only integers are allowed")
22. User Input
    => Python stops executing when it comes to the input() function, and continues when the user has given some input.
    => Python 3.6 uses the input() method.
        Ex 1.
            username = input("Enter username:")
            print("Username is: " + username)
    => Python 2.7 uses the raw_input() method.
        Ex 1. username = raw_input("Enter username:")
              print("Username is: " + username)
23. String Format
    => Using the curly brace and used format method to describe your value
        Ex 1. price = 49
              txt = "The price is {} dollars"
              print(txt.format(price)) #<output> The price is 49 dollars

              txt1 = "The price is {:.2f} dollars" #checkout format https://www.w3schools.com/python/ref_string_format.asp
              print(txt.format(price)) #<output> The price is 49.00 dollars

        Ex 2. Multiple Values
            quantity = 3
            itemno = 567
            price = 49
            myorder = "I want {} pieces of item number {} for {:.2f} dollars."
            print(myorder.format(quantity, itemno, price))

        Ex 3. using index method
            quantity = 3
            itemno = 567
            price = 49
            myorder = "I want {0} pieces of item number {1} for {2:.2f} dollars."
            txt = "His name is {1}. {1} is {0} years old." #used multiple index number to used one value multiple times
            print(myorder.format(quantity, itemno, price))
            print(txt.format("rahul", 25)) #<output> His name is rahul. rahul is 25 years old

        Ex 5. Naming Index
                myorder = "I have a {carname}, it is a {model}."
                print(myorder.format(carname = "Ford", model = "Mustang"))
24. File Handling
    => File handling is an important part of any web application.
    => you can creating, reading, updating, and deleting files using pythong function
    24.1 The open() function takes two parameters; filename, and mode.
        => Mode
           i. "r" - Default value. open file for read only and error if file does not exist
           ii. "w" - open file for write only and create file if does not exist
           iii. "a" - open an file for appending and create file if does not exist
           iv. "x" - create specific file and return error if the files exist
           Additional -
            "t" - Text - Default value. Text mode
            "b" - Binary - Binary mode (e.g. images)
            "rt" - read file only text file only
    24.2 Readonly Method
        => Spouse we have file demofile.txt and data is below -
                Hello! Welcome to demofile.txt
                This file is for testing purposes.
                Good Luck
            Ex 1.
                f = open("demofile.txt", "rt") # open text file only for read purpose oe f = open("D:\\myfiles\welcome.txt", "r")
                print(f.read()) #<output will be above said demofile.txt data>
                   #read method read the content of file
            Ex 2. Read only parts
                f = open("demofile.txt", "r")
                print(f.read(5)) #<output return only five letter of file> Hello

            Ex 3. Readline of file
                f = open("demofile.txt", "r")
                print(f.readline()) #<output read first line> Hello! Welcome to demofile.txt
                print(f.readline()) #<output read second line> This file is for testing purposes.
                f.close() #good practice for close file after work operation complete

        24.3 Write/Create file
            => "a" - Append - will append the data to end of the file
            => "w" - Write - will overwrite any existing content of file

            Ex 1. Append content data to exist file
                    f = open("demofile.txt", "a")
                    f.write("Now the file has more content!")
                    f.close()

                    #open and read the file after the appending:
                    f = open("demofile.txt", "r")
                    print(f.read())
            Ex 2. Delete/Overwrite exist  file content
                 f = open("demofile3.txt", "w")
                 f.write("Woops! I have deleted the content!")
                 f.close()

                 #open and read the file after the appending:
                 f = open("demofile3.txt", "r")
                 print(f.read())
            Ex 3. Create file and return error if file is exist
                f = open("myfile.txt", "x") #<output if file not exist empty file is created>
            Ex 4. Create new file if does not exist
                f = open("myfile.txt", "w")

        24.4 Delete File
        => you have used os modules for delete file/folder
            Ex 1. Remove File
                import os
                if os.path.exists("demofile.txt"): #check file exist or not
                  os.remove("demofile.txt") #file is deleted
                else:
                  print("The file does not exist")
          Ex 2. Removed Folder
            import os
            os.rmdir("myfolder") #You can only remove empty folders.
25. Modules
    => Some python usefully modules
    25.1 NumPy
    25.2 Pandas
    25.3 Django

    Note - I wil explain it later

26. Python MYSQL
    => Python can be used in database applications.
    => One of the most popular databases is MySQL
    => I assume you have already installed PIP if you not check content above 20. number
    => Install MYSQL Database
         site - https://www.mysql.com/downloads/.
    => install mysql driver
        command line : python -m pip install mysql-connector-python
        Note - if u got error then install window power shell with admin priority

    26.1 Database Setup
        i. Create Connection
            import mysql.connector
            mydb = mysql.connector.connect(
              host="localhost",
              user="root",
              password=""
            )
            print(mydb) #<output return object if no error> mysql.connector.connection_cext.CMySQLConnection object at 0x000001FA2FB42460
        ii. Connect to database
                mycursor = mydb.cursor()
                mycursor.execute("CREATE DATABASE mydatabase")
        iii. list your database
            import mysql.connector
            mydb = mysql.connector.connect(
              host="localhost",
              user="root",
              password=""
            )
            mycursor = mydb.cursor()
            mycursor.execute("SHOW DATABASES")
            for x in mycursor:
              print(x)
        iv. Try to Connect to database
            import mysql.connector
            mydb = mysql.connector.connect(
              host="localhost",
              user="root",
              password="",
              database="python_db"
            )
    26.2 Create Table
        => I have assume you have already connect to the database as per 26.2 iv number
         Ex 1.mycursor = mydb.cursor()
            mycursor.execute("CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))")

         Ex 2. check if table exist or list of table which is connect to database
                mycursor = mydb.cursor()
                mycursor.execute("SHOW TABLES")
                for x in mycursor:
                  print(x)

         Ex 3. alerter table
            mycursor.execute("ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY")
    26.3 Insert Data
        => first Connect to the database
             import mysql.connector
            mydb = mysql.connector.connect(
              host="localhost",
              user="yourusername",
              password="yourpassword",
              database="mydatabase"
            )
            mycursor = mydb.cursor()
        Ex 1. Insert Record
                sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
                val = ("John", "Highway 21")
                mycursor.execute(sql, val)
                mydb.commit() #It is required to make the changes, otherwise no changes are made to the table.
                print(mycursor.rowcount, "record inserted.")
        Ex 2. Insert Multiple Rows
            sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
            val = [
              ('Peter', 'Lowstreet 4'),
              ('Amy', 'Apple st 652'),
              ('Hannah', 'Mountain 21'),
              ('Michael', 'Valley 345'),
              ('Sandy', 'Ocean blvd 2'),
              ('Betty', 'Green Grass 1'),
              ('Richard', 'Sky st 331'),
              ('Susan', 'One way 98'),
              ('Vicky', 'Yellow Garden 2'),
              ('Ben', 'Park Lane 38'),
              ('William', 'Central st 954'),
              ('Chuck', 'Main Road 989'),
              ('Viola', 'Sideway 1633')
            ]
            mycursor.executemany(sql, val)
            mydb.commit()
            print(mycursor.rowcount, "was inserted.")

        Ex 3. Get Last Inserted Id
            => if you insert multiple rows, its will return last insert id
             print("Last Insert id", mycursor.lastrowid)

    26.4 Select Database
        => we are assuming you have connected to database
        Ex 1. mycursor = mydb.cursor()
            mycursor.execute("SELECT * FROM customers") # select specific column -  "SELECT name, address FROM customers"
            myresult = mycursor.fetchall()
            for x in myresult:
              print(x)
        Ex 2. Fetch One Row
            myresult = mycursor.fetchone()
        Ex 3. Filter / Where
            sql = "SELECT * FROM customers WHERE address ='Park Lane 38'"
            mycursor.execute(sql)
        Ex. 4. Wildcard Characters / LIKE OPERATOR MYSQL
            sql = "SELECT * FROM customers WHERE address LIKE '%way%'"
            mycursor.execute(sql)

        Ex 4. Prevent SQL Injection
            => Escape query values by using the placholder %s method:
            mycursor = mydb.cursor()
            sql = "SELECT * FROM customers WHERE address = %s"
            adr = ("Yellow Garden 2", )
            mycursor.execute(sql, adr)
            myresult = mycursor.fetchall()
            for x in myresult:
              print(x)
        Ex 5. ORDER BY
            => Use the ORDER BY statement to sort the result in ascending or descending order
            => Mode - ORDER BY id ASC or ORDER BY id DESC
                mycursor = mydb.cursor()
                sql = "SELECT * FROM customers ORDER BY name DESC"
                mycursor.execute(sql)
                myresult = mycursor.fetchall()
                for x in myresult:
                  print(x)

    26.5 DELETE METHOD
        EX 1. delete record from the table
            mycursor = mydb.cursor()
            sql = "DELETE FROM customers WHERE address = 'Mountain 21'"
            mycursor.execute(sql)
            mydb.commit() #It is required to make the changes, otherwise no changes are made to the table.
            print(mycursor.rowcount, "record(s) deleted")
        EX 2. delete all record of table
            statement - sql = "DELETE FROM customers"
        EX 3. prevent SQL INJECTION
               mycursor = mydb.cursor()
               sql = "DELETE FROM customers WHERE address = %s"
               adr = ("Yellow Garden 2", )
               mycursor.execute(sql, adr)
               mydb.commit()
               print(mycursor.rowcount, "record(s) deleted")
   26.6 DROP TABLE
        Ex 1.
            mycursor = mydb.cursor()
            sql = "DROP TABLE table_name"
            mycursor.execute(sql)
        Ex 2. drop if table exist
            statement - sql = "DROP TABLE IF EXISTS customers"
   26.7 UPDATE TABLE
        Ex 1.
            mycursor = mydb.cursor()
            sql = "UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'"
            mycursor.execute(sql)
            mydb.commit()
            print(mycursor.rowcount, "record(s) affected")
        Ex 2. Prevent SQL Injection
           mycursor = mydb.cursor()
           sql = "UPDATE customers SET address = %s WHERE address = %s"
           val = ("Valley 345", "Canyon 123")
           mycursor.execute(sql, val)
           mydb.commit()
           print(mycursor.rowcount, "record(s) affected")
   26.8 LIMIT
        => You can fetch the limit the number of records by using the "LIMIT" statement:
        Ex 1.
            mycursor.execute("SELECT * FROM customers LIMIT 5")
            myresult = mycursor.fetchall()
            for x in myresult:
              print(x)
        Ex 2. Get Record form Another Position
            -> OFFSET mean leave 1 row 2nd and 3rd row from query
            -> Get Result start from 4 row  and only five rows
                mycursor = mydb.cursor()
                mycursor.execute("SELECT * FROM customers LIMIT 5 OFFSET 3")
                myresult = mycursor.fetchall()
                for x in myresult:
                  print(x)
    26.9 JOIN TABLE
        => join the table and result ge together
        => spouse we have two table
            users-table
               { id: 1, name: 'John', fav: 154},
               { id: 2, name: 'Peter', fav: 154},
               { id: 3, name: 'Amy', fav: 155},
               { id: 4, name: 'Hannah', fav:},
               { id: 5, name: 'Michael', fav:}
           product-table -
                { id: 154, name: 'Chocolate Heaven' },
                { id: 155, name: 'Tasty Lemons' },
                { id: 156, name: 'Vanilla Dreams' }
           Ex 1. INNER JOIN/JOIN
                => return the data if result is match mean users-tabel.fav match with product-table.id
                    mycursor = mydb.cursor()
                    sql = "SELECT \
                      users.name AS user, \
                      products.name AS favorite \
                      FROM users \
                      INNER JOIN products ON users.fav = products.id"
                        mycursor.execute(sql)
                        myresult = mycursor.fetchall()
                        for x in myresult:
                          print(x)
                 Note - Note: You can use JOIN instead of INNER JOIN. They will both give you the same result.
         Ex 2. LEFT JOIN
                => If you want to show all users, even if they do not have a favorite product, use the LEFT JOIN statement:
                 => statement - sql = "SELECT \
                               users.name AS user, \
                               products.name AS favorite \
                               FROM users \
                               LEFT JOIN products ON users.fav = products.id"
         Ex 3. RIGHT JOIN
            => If you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement:
            => Statement - sql = "SELECT \
                             users.name AS user, \
                             products.name AS favorite \
                             FROM users \
                             RIGHT JOIN products ON users.fav = products.id"
            Note: Hannah and Michael, who have no favorite product, are not included in the result.

27. MONOGDB DB
    => One of the most popular NoSQL database is MongoDB.
    => MongoDB stores data in JSON-like documents, which makes the database very flexible and scalable.
    => download free MongoDB database at https://www.mongodb.com.
    27.1 Installation of Mongo Driver in Python
        => We recommend that you use PIP to install "PyMongo".
            i. run command line : python -m pip install pymongo
                if you got error then open window powershell with admin - run command again
            ii. import pymongo in python file for use
    Note - I have leave this point


28. CSV - Comma Separate Values
    => Can store large amount data
    => Simple and easy used
    => Each record consist of fields separated by commas(delimiter)
    28.1 Install Panadas Modules for import CSV file and perform the action
        i. pip install pandas

    Ex 1. Read the CSV File
        import pandas as pd
            df = pd.read_csv_("filepath/filename.csv")
            print(df);
    Ex 2.
        import pandas as pd
        df = pd.read_csv_("filepath/filename.csv")
        sum = df['age'].sum();
        mean = df['age'].mean();
        min = df['age'].min();
        max = df['age'].max();
        count = df['age'].count();
        median = df['age'].median();
        var = df['age'].var()
        etc.


