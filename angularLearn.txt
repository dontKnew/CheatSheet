1. install angular
=> npm install -g @angular/cli
2. update angular project
=> ng update  @angular/cli @angular/core @angular/material --allow-dirty 

if you got error about  : 
Node packages may not be installed. Try installing with 'npm install'.
Could not find the '@angular-devkit/build-angular:dev-server' builder's node package
use commmand : 
	2.1 npm uninstall @angular-devkit/build-angular
	2.2 npm install --save-dev @angular-devkit/build-angular
		or 
	2.1 ng update  @angular/cli @angular/core @angular/material --allow-dirty -force


1. write function
=> functionName(){//initial code..}
=> function(variableName1 : dataType, variableName2 : any){// if u  dont knew dataType use  "any" keywords}
2. Property binding:
never used of Interpolation for data attribute for changed the value because boolean does not work due to convert string 
<input type="text" [value]=variableName>
interpolation : 
<input type="text" value={{variableName}}>
3. Interpolation : its a {{sajid}}, sajid variable value is declared in fileName.component.ts
4. define id in html tab
=><h1 #iAmId > </h1>

5. ng if and ng if else statement
show=true (this is part of ts.component variable)
<h1 *ngIf="show else  elseMe"> // if variable 'show' true : condition true, else condition false 
  condition true
</h1>
<ng-template #elseMe>
  <h1> Condition false</h1>
</ng-template>
or
<h1 *ngIf="show; then ifBlock else  elseBlock"></h1>

<ng-template #ifBlock>
  <h1> Condition true</h1>
</ng-template>
<ng-template #elseBlock>
  <h1> Condition false</h1>
</ng-template>
or 
<h1 *ngIf="show">
  I am true
</h1>
or
/// use else if statement like below said
<ng-template [ngIf]="show">
  <h1> I am true</h1>
</ng-template>
or
color = 'red';
<ng-template [ngIf]="color==='red'">
  <h1> I am red</h1>
</ng-template>

6. if you have multiple condition in this case you switch statement.
color = "blue" (this is part of ts.component variable)
<h1 [ngSwitch]="color">
  <h2 *ngSwitchCase="'red'">I am Red</h2>
  <h2 *ngSwitchCase="'green'">I am green</h2>
  <h2 *ngSwitchCase="'blue'">I am blue</h2>
  <h2 *ngSwitchDefault>I am Default Switch Case </h2>
</h1>
7. loop with array
users = ['rahul','kamina','kutta','ullu'];
<h1  *ngFor="let name of users">
  <p>{{name}}</p>
</h1>
8. array object with loop
users = [
      {name:'rahul', id:1},
      {name:'kamina', id:2},
      {name:'hello', id:3},
      {name:'kem', id:4},
      {name:'panipat', id:5},
      {name:'luv', id:6}
    ];
<h1  *ngFor="let name of users">
  <p>{{name.name}}-- {{name.id}}</p>
</h1>
9.Style Binding
Ts File : redColor = "red"; blue = "blue";
<h1 [style.color]="redColor" [style.backgroundColo]="blue"> I am Style Binding </h1>

10. Basic Pipes
//TS FILE
today = new Date();
  capString(input:string){
    return input.toUpperCase();
  }
  user = {
    name : 'Sajid Ali',
    age : 30,
  }

<!--HTML FILE!>
<h1> {{today | date | uppercase}} </h1>
<h1> {{today | date:'fullDate'}} </h1>
<h2> {{003.3400 | number:'1.2-3'}}</h2> <!-- out put : 3.34-->
<h3>{{capString('Love You Angular')}}</h3> <!-- use pipe inseated of making function in ts file-->
<h3>{{100 | currency}}</h3>
<h4> {{user | json}}</h4> <!-- Output joson formate-->
<h4> {{user.name | uppercase}}</h4> <!-- Output name value from ts file-->

10.1 Custom pipes
command : ng generate pipes pipes/usdInr // generate pieps under pipes folder which function to convert to usd (united states doller) to inr (indian rupess)
// APPLY CHANGED PIPES FILE
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'usdInr'
})
export class UsdInrPipe implements PipeTransform {

  transform(value: number, ...args: number[]): unknown {
    const [price] = args;
    return value*price;
  }

}

<!-- HTML FILE -->
<h2>Your usd to inr {{10 | usdInr:70}}</h2> <!-- function ready : usd to inr -->

11.1 Template Driven Form : selected all value at the one click of form data
=> import { FormsModule } from '@angular/forms'; // import in app.module.ts file 
// TS FILE
name:String = "";
  password:any = "";
  loginUser(item:any){
    this.name = item.name;
    this.password = item.password;
    console.warn(item);
  }

<!-- html file -->
<form action="" #loginForm="ngForm" (ngSubmit)="loginUser(loginForm.value)">
    <input type="text" name="name" id="" placeholder="Enter Your Name" ngModel>
    <br> 
    <input type="password" name="password" id="" placeholder="Enter Your Password" ngModel> <br> <br>
    <button>Login</button>
</form>
<!-- also work submit button out side of form -->
<button (click)="loginUser(loginForm.value)">Login</button>
<div>
    <h2> {{name}}</h2>
    <h2>  {{password}}</h2>
</div>

11.1.1 Form Validation
=> you can type also inside input email tag : <input type="email" email required> 
<form action="" #loginForm="ngForm" (ngSubmit)="loginUser(loginForm.value)">
    <input type="text" required #name= "ngModel" pattern="['a-zA-Z']+$" name="name" id="" placeholder="Enter Your Name" ngModel>
    <span *ngIf = "name.invalid && name.touched"> Enter vaild name</span>
    <br> 
    <input type="password" name="password" #password= "ngModel"  minlength="4" id="" placeholder="Enter Your Password" ngModel required> 
    <span *ngIf = "password.invalid && password.touched"> Enter vaild password</span>
    <br> <br>
<button [disabled]="loginForm.invalid">Login</button> <!-- Enable this button whenever form input is vaild-->
</form>

11.2 Reactive Form : 
=> import { ReactiveFormsModule } from '@angular/forms'; // added in app.module.ts file 
=>import { FormGroup, FormControl } from '@angular/forms'; // added in app.component.ts file
// TS FILE
loginForm  = new FormGroup({
    name:new FormControl('sajid'),
    password:new FormControl('123')
  })
  name:String = "";
  password:any = "";
  loginUser(){
    this.name = this.loginForm.value.name;
    this.password = this.loginForm.value.password;
    console.warn(this.loginForm.value);
  }

<!-- HTML FILE -->
<form  [formGroup]="loginForm" (ngSubmit)="loginUser()">
    <input type="text" name="name" id="" placeholder="Enter Your Name" formControlName = 'name'>
    <br> 
    <input type="password" name="password" id="" placeholder="Enter Your Password" formControlName="password"> <br> <br>
    <button>Login</button>
</form>
<div>
    <h2> {{name}}</h2>
    <h2>  {{password}}</h2>
</div>

12. module : all component, services groups are called module, 
generate new module : ng generate moudle admin-auth
generate component in created module : ng g c admin-auth/dashboard // this dashboard component will auto import in admin-auth.module.ts for configuration
=> import { AdminAuthModule } from './admin-auth/admin-auth.module'; // added in app.module.ts file
=> exports:[DashboardComponent]// added in created module admin-auth.module.ts file under @NgModule function, export function will be allow to access <app-dashboard> </app-dashboard> anywhere in angular component

13. Directive : directive like this ngIf, ngSwitch,  and you make custome directive 
command for custom directive : ng g directive directiveName

import { Directive, functionParameterName} from '@angular/core';

@Directive({
  selector: '[appRedElement]'
})
export class RedElementDirective {

  constructor(el:functionParameterName) {
    el.nativeElement.style.color = "red";
    el.nativeElement.style.backgroundColor = "blue";
    el.nativeElement.innerHTML = "Hello Angular";
   }

}
=> you can use some javascript function like that el.nativeElement.innerHTML = "hello";
<!-- HTML FILE -->
<h1 appRedElement> </h1>

14. 404 page : if you use path:'**' in routing this will redirective you alwayas this component path if spesfic routing or invaild route not define. and if user try to enter invaild route

15. Child Routing
//app.routing.moudle.ts. under routes: object below said
=> component:AdminComponent, path:'admin',
	children:[
		{path:'admin-help', component:AdminHelpComponent},
		{path:'admin-about', component:AdminAboutComponent},
	]
url will be : localhost:4200/admin/admin-help // that called child routing 
<!-- HTML FILE -->
<a routerLink  = 'admin-help'> Admin Help </a> <br.
<a routerLink  = 'admin-about'> Admin About</a>
<router-outlet</router-outlet>

16. Create Route in existing angular poject
command : ng g module app-routing --flat --module=app

15. Dynamic Routing 
=> import { ActivatedRoute } from '@angular/router'; 
userId:string | null=null; // use in html file interpolation {{userId}}
constructor(private route:ActivatedRoute) { }
  ngOnInit(): void {
    console.warn("admin id", this.route.snapshot.paramMap.get('id')) // get id from url(route)
      this.userId = this.route.snapshot.paramMap.get('id');
  } // ts file under export class AppComponent

path : 'admin/:id', component:Componentname, // routing file
<a routerLink = 'admin/20'>adminUserId</a> 

16. 









