=> PHP 7 version New Features
    1. Declare Data types
        => You can declare data type of function parameter
        => Enable strict mode strict_types for getting error if any variabel data type not defined or  function parameter
            - At the top of header  php file : delcare(strict_types = 1) 
            - ini_set("display_errors', '1'); // show php errors

        - Examples
            1. 
                class User{} 
                function test(User $ab){}
                // call function
                test(new User());
            2. 
                function abc(Array $abc){}
                // call function
                test([]);
            3. 
                function isBoolean(bool $a){}
                // call function
                test(true); // correct
                test("asdfj;") // error will display because you are mentioned using strict_types
    
    2. Return Data type declaration
        => You can define any  function for data type will be return
        - Examples 
            1. function test() : array{ return[] } // return should be array other wise given its errro
    
    3. ?? Operator
        => You can check variable data value exist or not
         - Examples
            Before : $nam e= isset($_GET['name]) ? $_GET['name'] : "Not Found";
            var_dump($name) // return "Not Found" if data GET is  not isset

            After using ?? operator
            $name = $_GET['name'] ?? "Not Found";
            var_dump($name) 


    4. namespace group 
        - Examples
            i. country.php 
                namespace Country{
                    class India{}
                    class Pakistan{}
                } 
            ii. state.php
                namespace Country\State{
                    class Punjab{}
                    class Delhi{}
                } 
            iii. App.php // where we will access the all class
                => Old Methods
                    namespace App{
                        // Access country.php class
                        use Country\India;
                        use Country\Pakistan;
                        
                        $india = new India();
                        $pakistan = new Pakistan();

                        // Access state.php class
                        use Country\State\Punjab;
                        use Country\State\Delhi;

                        $punjab = new Punjab();
                        $delhi = new Delhi;
                    }
                
                => New Methods with namespace group
                namespace App{
                    use Country\{ India, Pakistan, State\Punjab, State\Delhi}
                        $india = new India();
                        $pakistan = new Pakistan();
                        $punjab = new Punjab();
                        $delhi = new Delhi;
                }
    5. interactive shell
        => You can use this shell whenever you have to perform small task such as sum, max, array, object
        => this is feature before php 7 version OK!
        Example - 
            open command terminal run the command : php -a
            php > echo "hello";
            php > $a = 20; $b = 30;
            php > $a+$b;

=> Basic PHP
    1. Variable
        => We have three type variable
            i. local Variable : those variable where you define inside of function
            ii. Global Variable  : this variable define outside of function
                - if you want to access outside variable inside of function
                - use Global Keyword
                    Ex:  $x = 50; function test(){ global $x; return $x; }  

                ii. update global variable inside of function using index array 
                    Ex:  $x = 50; function test(){ return $GLOBAL['X']+4 }  
                
            iii. Static Variable 
                    -  Noramlly, when function  id  completed/executed function, all of its variable are deleted
                    - you can not delete variable data, while using static keyword
                    
                    Ex : function myTest() { static $x = 0; echo $x; x++}; 
                                myTest() // return 1
                                myTest() // return 2 because we have used static variable its, variable data could not delete
                                myTest() // return 3
    2. PHP Strings
        => Theres lots of method for changing strings word, replace word etc. lets look up it.
            i. strlen("Hello World!") // return 12, might be inlcude whitepace
            ii. str_word_count("hello world"); // return 2
            iii. strrev("hello world") outut : !dlrow olleH          
            iv. strpos("Hello World", "World") // if found return position 6, if not found return false
            v. str_replace("world", "dolly", "Hello world") // output : Hello Dolly;
            vi. strip_tags('text with html tag', optional) optiona : enter html tag which you dont want to remove,  Remove tag from line 

            vii. htmlspecialchars("I love <b> india </b>") // output : i love &lt;b&gt india &lt;/b&gt
                & (ampersand) becomes &amp;
                " (double quote) becomes &quot;
                ' (single quote) becomes &#039;
                < (less than) becomes &lt;
                > (greater than) becomes &gt;

            viii. stripslashes("I love you \ baby") // remove backslash

            ix. parse_str("name=Sajid&age=43",$myArray);// convert into name and age into associates array;
                - parse_str("name=Sajid&age=43"); // if you do not give parameter after string, array name, then it will auto matic convert into variable 
            x. 
    3. Numaric
        i. is_init()// check value is integer or not

    4. Arrays
        i. Index Array : $ary = array("value", "value") // access by index numeric : $ary[0]
        ii. Associates Array : array("key"=>"value", "key"=>"value")
        iii. Multidimmensional Array : array(array(), array(), array()) 
        
        4.1 Pre-Defined Method for array
            i. Sorting Arrays
                sort() - sort arrays in ascending order like 1-10
                rsort() - sort arrays in descending order like 10-1
                
                - For Associates Array :
                asort() - sort associative arrays in ascending order, according to the value
                ksort() - sort associative arrays in ascending order, according to the key
                arsort() - sort associative arrays in descending order, according to the value
                krsort() - sort associative arrays in descending order, according to the key
            ii. array_keys() // return all associates array keys 
            iii. array_key_exists()	 // Checks if the specified key exists in the array
            vi. $newArr =  array_merge($arr1, $arr2, $arr3); // mixed all arrays 
            
            v. Split array chunck of twos
                $cars=array("Volvo","BMW","Toyota","Honda","Mercedes","Opel");
                var_dump(array_chunk($cars,2));
                - Now its will return three arrays because we have six values with chunk 2
            vi. array_change_key_case($age,CASE_UPPER) // change associates array key to uppercase letter or array_change_key_case($age,CASE_LOWER)

            vii. array_column(array, column_key, index_key) // return value from array
                - third parameter is optional
                Note - Might be work only with multi-dimensional array 
            viii. array_combine($arr1, $arr2) // return associates array 
                Note - $arr1 = key , $arr2 = value
            ix. array_count_values($arr) // remove duplicate values, count only unique value
            
            x. array_diff($a1,$a2, $a3) // third parameter is optional
                Note - return the different keys and value from $arr1 and arr2 

            xi. array_search("value",$arr, true);  its return key if found
            Note - third is strict, if true, then 2 number is equal to 2 string

            x. array_unique($arr) // remove duplicate value from array
            xi. sizeof($arr) // return the number of elements in array
            x. array_sum($arrNumber) // return total values
            xi. $a=array("red","green","blue","yellow","brown");
                print_r(array_slice($a,2)); //output : Array ( [0] => blue [1] => yellow [2] => brown )
            xi. array_reverse($a) // reverse with key and values
            xii. array_push($oldArry, $newArry or values);
            xiii. array_pop($arr) // delete last elements of array
            xiv. array_product(5,10,5) //ouptput 250, (5x10x5);
            xv. array_pad(array, NewArraysize, value)
                - Example : $a=array("red","green");
                            print_r(array_pad($a,5,"blue")); //ouptput Array ( [0] => red [1] => green [2] => blue [3] => blue [4] => blue )
   

            




            ii. Foreach
                Ex : $colors = array("red", "green", "blue", "yellow");
                        foreach ($colors as $value) {
                            echo "$value <br>";}
                Ex : $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
                        foreach($age as $x => $val) {
                            echo "$x = $val<br>";}





    4. PHP Error Handles...
        
        i. error_reporting(0); // Turn off error reporting
        ii. error_reporting(E_ERROR | E_WARNING | E_PARSE); //// Report runtime errors
        iii.error_reporting(E_ALL); //// Report all errors
        iv. ini_set("error_reporting", E_ALL); //// Same as error_reporting(E_ALL);
        v. error_reporting(E_ALL & ~E_NOTICE); //// Report all errors except E_NOTICE
        vi. ini_set("display_errors', '1'); // show php errors
        v. ini_set("display_errors', '0'); // hide php errors
        



    


                


             


        
 