=> Laravel Commands
	i. php artisan optimize 
		-config cahce clear, route cache cleared etc.

1. Introduction

    => Its PHP Based framework for building high end web application.
    => laravel save your times because some of tool laravel develop like, authentication, template engine etc.

2. Installation :
    2.1 Way One :
        i. composer global require laravel/installer   : this command will be install laravel on your system thereafter you can create new laravel project 
        ii. laravel new ProjectName : this is command will create new project of laravel
        Note : You do not need to run i. first command
        => remove laravel from system : composer global remove laravel/installer 

    2.2 Way Two : 
        i. composer create-project --prefer-dist laravel/laravel/ ProjectName 
		=> install old version : composer create-project laravel/laravel:^8.0 practice
			Error : [InvalidArgumentException] Could not find package laravel/laravel with version 8.0 in a version installable using your PHP version, PHP extens ions and Composer version.
			try this command : composer create-project laravel/laravel:^8.0 example --ignore-platform-reqs 


3. Directory Structure : 
    app - core code of your application.
    bootstrap - .php file which bootstraps the framework. 
    config - The config directory, as the name implies, contains all of your application's configuration files. 
    database - contains your database migrations, model factories, and seeds. If you wish, you may also use this directory to hold an SQLite database. 
    public - contains the index.php file, which is the entry point for all requests entering your application and configures autoloading. This directory also houses your assets such as images, JavaScript, and CSS. resources - The resources directory contains your views as well as your raw, un-compiled assets such as CSS or JavaScript. This directory also houses all of your language files.
    routes - contains all of the route definitions for your application.
    storage - The storage directory contains your compiled Blade templates, file based sessions, file caches, and other files generated by the framework.
    tests - The tests directory contains your automated tests. 
    vendor - The vendor directory contains your Composer dependencies.

    Note : You will learn all directries by learning larvael 
4. Routing : All Laravel routing defined in routes/web.php se
	Syntax : Route::get('URI',[]);
	Example : Route::get('about', function(){return "Hello World"});

	4.1 Routing Returning String
		Route::get('about', function(){return "Hello World"});

	4.2 Routes Parameter : capture segments the id or string from url within 
		Example : Route::get('about/{u_id}', function($id){return $id});
		=> Multiple Route Parameter : Route::get('about/{post_id}/comment/{comment_id}',function($postid, $cmtid){return $id});

	4.3 Optional Routes Parameter : We can make optinal parameter in routes 
		Example : Route::get('student/{name?}', function($name='DefaultName'){return $name}); // if parameter not defined then, deafulat name will be printed , 
		
	4.4  Routes Parameter and Regular Expression
			Route::get('student/{name}', function($name_p='DefaultName'){return $name_p})->where('name', '[A-Za-z]+');  // accpet only string alpha parameter3 

		i.  Multiple regular expression in parameter 
				Route::get('manager/{id}/{name}',function($_id, $_name){ return $_id . $_name})->where(['id'=>'[0-9]+', 'name'=>'[a-z]+']);

		ii. Regular expression with helper method 
				Route::get('manager/{id}/{name}',function($_id, $_name){ return $_id . $_name})->whereUuid('id'); or  for string : ->whereAlpha('name'); 

		iii. Route:redirect('/fromRouteName', 'toRouteName');  or Route:permanentRedirect('/fromRouteName', 'toRouteName')// third parameter is optional , you can use http status code 

		iv. Fallback Routes : if no any routes request match, then fallback routes execute, you have to define this routes last  of routes register
				Route::fallback(function(){})

		v. Route Methods : Route::get/post/put/patch/delete/options('URI', Callback)
			=> Multiple method  Route:match(['get','post'], '/', function(){});
			=> Route:any('/', function(){}) // redirect to this route if, no route found
		
		vi. Global Constraints 
			=> You have to define pattern method in App\Providers\RouterServiceProvider class	
				public function boot(){ Route::pattern("id",'[0-9]+')}
			=> Once Pattern defined, Its automatically applied to all RouterServiceProvider
				Exmaple : Route::get('user/{id}',fucntion($id){ return $id }); // only executed if {id} is numeric

	4.5 Merge all routes inside of one controller, if your all methods are in same controllers
		Route::controller(ControllerName::class)->group(function(){
			Route::get('/user','showStudent');
			Route::get('/create','createStudent');
		})
	4.6 Route Prefix : thats mean all routes inside of admin
			Route::prefix('admin')->group(function(){
				Route::get("/user,[]);  // uri will be : /admin/user
			}); 
		4.6.1 Used Named Route with prefix
			Route::name('admin.')->group(function(){
				Route::get("/user,[])->name("user");  
			}) //  route name can be accessed by : route("admin.user");

	4.7 RouteLimiter Service 
		=> Its providing an route uri to how many times can be hit in one mint. the uri.
		Example : 
			i. Define Method in App\Providers\RouterServiceProvider class	
				pubilc function configuratinRateLimiting(){
					RateLimiter:for("api", function(Request $request){
						return Limit:perMinute(60)->by(optional($request->user()->id?:$request->ip()); // you can hit the uri four times under the one mints.
					})
					RateLimiter:for("custom_limit", function(Request $request){
						// return Limit:perMinute(4) // you can hit the uri four times under the one mints.
						return Limit:perMinute(4)->response(function(){
							return response("custome_respnose..",429); // call laravel error page
						}) }) }
			ii. you can use above said method thorugh middleware which is already registered App\Http\Kernal.php
			iii. route::get("/login",[])->middleware("throttle:custom_limit");

	4.5 Named Route : specificing to any route name and you can use thats named route for redirecting urls
		=> Routes named should be unique.
		Example : 
			Route::get('about',function(){return view('viewName')})->name('routerName')	 

		=> Controller File : route('routName'), redirect()->route('routeName')
		=> View File :  <a href="{{route('home')}}"> Home </a>
			 parameter : <a href="{{route('home', ['category']=>"mobile")}}"> Home </a>
		
		=> Routing third parameter is query string ?cat=3
				Example : Route::get("user/{id}",[])->name('routeName');
					url = route("user",["id"=>4, "role"=>admin])
					https://localhost:8000/user/id?role=admin;
				
		
5. View : here you can write all HTML/PHP code and views are stored in the resources/views directory
	Example  1. : 
		* Creating View : resources/views/fileName.balde.php : <html> ... </html>		
		* Route for  View : 
		 Route::get('about',function(){return view('fileName')}) 
		 Route::view('about','fileName');// only for return view

	Example  2 : if view inside of folder 
		* Creating View : resources/views/admin/fileName.balde.php : <html> ... </html>		
		* Route for  View : 
		 Route::get('about',function(){return view('admin.fileName')}) 
		 Route::view('about','admin.fileName');// only for return view

	Example  3 : Passing Data From route to view 
	  	view('viewFileName', ['variableName'=>'Soname'])
		*Access data in view file </h1> Hello   {{$variableName}} </h1>
	
	Example 4. Sharing Data to All views
		=> App\Providers\AppServiceProvider class
		Syntax : View::share("key", "value");
		import use Illuminate\Support\Facades\View;
			public function boot(){ View::share("user", ["name=>Sajid", "age=>20"]);}
		Now You can use in any view blade file

6. Controller  : this is group related request handling logic into a single class
	=> Create Controller command : php artisan make:controller ControllerName
	=> fill be created directory : app/Http/Controllers/ControllerName
	=> Now you can define method inside of controllers file

	6.1 Route for Controllers
		=> include routes/web.php : use App\Http\Controllers\ControllerName;
		=> define routes : Route::get('about',[ControllerName::class,'methodName']);

	6.2 Getting Parameters in controller 
		routes/web.php => Route::get('about/{name}',[ControllerName::class,'methodName'])
		ControllerName.php => inside of class controller : function methodName($name1){ return "hello " . $name1;}

	6.3 Return view from Controller
		ControllerName.php => inside of class controller : function methodName(){ return view('viewfileName')};

	6.4 Passing Data to view : like para 5 of Example 3
	6.5 Multiple method inside of controller 
		Route::get('aboutMe',[ControllerName::class,'methodName'])
		Route::get('aboutYou',[ControllerName::class,'methodName2'])
	
	6.6 Single Controller : if you would like to define single controller that only hanlde a single action
		=> php artisan make:controller ControllerName --invokable // generate file for single action controller
		=> Route::get('about',ControllerName::class) // here no need to define method name because calling only single method/action
	6.7 merge all routes inside of one controller, if your all methods are in same controllers
		Route::controller(ControllerName::class)->group(function(){
			Route::get('/user','showStudent');
			Route::get('/create','createStudent');
		})

Note : Now the Laravel Framework processing :  Route=>controller=>view

7. blade 
	=> blade is powerfull templating engine
	=> You can write also plain php code in blade file
	=> filename.balde.php, before after file name, we used .blade.php, which is stored in resources/views/
	=> Our laravel file view is blade file
	=> pass data to blade inside curly brace {{$variableName}}
	
	7.1 calling function : you can call any php functino inside of curly brace {{time()}}
	7.2 Comment : {{-- This comment will not be present in the rendered(browser) HTML --}}
	7.3  Directives 
		7.3.1 conditional Directives
			=> @if(condition) .... @endif
			=> @if(condition) .... @else @endif
			=> @if(condition) .... @elseif(condition) @else @endif
			=> @unless(condition) @endunless
			=> @isset(var) ...  @endisset // check value exist or not
			=> @empty(var) ... @endempty // check data empty or not 

		7.3.2 Authentication Directives
			=> @auth('admin') ... @endauth // check user is Authenticated or not
			=> @guest ... @endguest // check if user guest

		7.3.3 Environment Directives 
			=> @production ...  @endproduction // on production specific contents
			=> @env('env_name')  ... @endenv or @env(['env1', 'env2']) // applicaton is running env_name

		7.3.4 Switch Directives
				@switch(expression) @case ... @break @case(expressoin2) ... @break  @default ... @endswitch

		7.3.5 Include Directives  : blade @include directives allow you to include a blade view from within another view
				i. @include('view_name')
				ii. @inlcude('view_name',array) // you can pass data using array to included blade view
				iii. @includeif('view_name', array) // include if file exist
				iv. @inlcudeWhen($boolean, 'view_name', array) // inlcude file base of true or false, third parameter is optional
				v. @inlcudeUnless($boolean, 'view_name', array) // inlcude file base of true or false, third parameter is optional
				vi. @each('view_name', array, 'stu')  like foreach function with include 
				vii. @once <script src=''> </script> @endonce // render only once 

		7.3.6 Write plain php code inside of directive @php ... @endphp 

8. Component
	=> Component are a resuable group of elements
	=> thats usefull whenever we are developing an large application
	=> Components are two type 

	8.1 Class Based Component : 
		=> create component : php artisan make:component Component_name // for subdirectory php artisan make:component DirectoryName/Component_name
		=> Generated component will place in path : App\View\Component Directory 
		=> Also generated component  in path resources/views/components directory 

		i.  Rendering/Display Component : display component name will be by the kebab-case name of the component class
		 	Example : <x-component-name/>, <x-user-profile/>
			 => for subdirectory used : <x-subdirectory.component-name/>, <x-include.user-profile />
			 => Pass data to component : <x-card-title='card-Title' :description=$phpVariableName /> 
			 

	8.2 Anonymous Component : utilize a single view file as component and have no associated class.
	=> To Define an anonymous component : resources/views/components/componentName.blade.php
		<h1> {{$title}}</h1>
	=> Rendering/Display component : <x-componnetName title="card-title"/>

	8.3 Slot : pass additional content or data to your #componnet via "slots", thats rendering by echo $slot or {{$slot}} variable
		=> Define Slot : <x-alert> <span> Hello World </span> </x-alert> 
		=> Using Slot Inside of Component : <h1> Alert Component </h1> {{$slot}}

		8.9.1 Named Slot		
		=> Define Slot : 
			<x-alert> 
				<x-slot name="title"> <span> Hello World </span> </x-slot> 
				<span> Hello Slot</span>
			</x-alert> 
		=> Using Slot Inside of Component : <h1> {{$title}} </h1> <h2>Alert Componnet </h3> {{$slot}}
		

		Note: Any content not within an explicit x-slot tag will be passed to the component in the $slot Variable.
9. Layout 
	=> Reduce the code 
	=> helps to manage the code in more effcient way
	=> easiest change content
	=> create layout componnet : resources/views/components/LayoutComponentName.blade.php
	=> We can create layout in two way : i. component ii. template inheritance

	9.1 Using Component 
		=> resources/views/components/LayoutComponentName.blade.php
		<html> <title> {{$title}} </title> <body> {{$slot}} </body> </html>
		
		1. using created layout : resources/views/home.blade.php
		<x-LayoutComponentName> 
			<x-slot name="title"> <h3> Home </h3> </x-slot> 	
			<h1> This is home Page </h1>
		</x-LayoutComponentName>
 
		2. using created layout : resources/views/about.blade.php
		<x-LayoutComponentName> 
			<x-slot name="title"> <h3> contact </h3> </x-slot> 	
			<h1> This is contact Page </h1>
		</x-LayoutComponentName> 

	9.2 Template Inheritance
		
		9.2.1 Defining Layout : resources/views/folderName/layoutName.blade.php
		=> @section directive, is define a section of content 
		=> @yield directive is used to display the content of a given section 
			- $yield accpet deafult value as second parameter, if section yield undefined second parameter, its also render/display
			<html...> @yield('page-name') // display the content
				@section("default-content") <h4> Default section showing </h4> @show // showing every page whereas extend this layout page
			</html...>				
		9.2.2 Extend the layout : resources/views/home.blade.php
			@extends('folderName.layoutName') // define layout location
			@section ("page-name","Home Page") 
			@section ("page-name") <h1> Home Page </h1> @endsection
			@section('default-content') 
				@parent   // showing default content with above said h4 element
				<h2> Another contnet </h3>
			@endsection // must be use @show directive in define component

			@section('default-content') now overwirte above said content... and only only render/display below contents, 
				<h2> Another contnet </h3> 
			@endsection // must be use @show directive in define component

10. Adding Assets like css and js
	10.1 First Method used only without complied: 
		=> public/yourFolderAssetsName or file name
		=> <link rel="stylesheet" href="{{asset('folderName/fileName')}}"> or {{url('css/style.css')}} // url will be display with domain name https://27.0.1.1/css/style.css

	10.2 Second Method used only for complied or minified css or js file etc.
		i. install laravel mix using npm - laravel already add dependency in package.json file, just run command npm install, it will install laravel mix.
		ii. create css and js file inside of resources/css and resources/js folder respectively
		iii. Open webpack.mix.js file and metioned  css and js file, later will processed.
			Example : mix.js('resources/js/file.js', public/js)
					postCss('resources/css/file.css', public/css)
		iv. open package.json file you will see some command while used that command complied the css and js file etc.
			=> npm run dev : this command will mix all of your css and js file complied and place  in  your public directory (Non-minified code)
			=> npm run prod : like npm run dev functions, but its (minified code)
			=> npm run watch : like npm run dev/prod funtions, but its will be automatically in changing in public folder while changed in resource/css and js file.
	10.3 Stacks
		=> Its helpful for specifiying any javascrit libraries required by your child views
		i.add js library before another library
			<head> @stack("scripts") </head>
			@push("scripts") //this will be second @endpush
			// this will later
			@prepend("scripts") this will be first @endprepand //this will be

11. Adding Boostrap 
	i. install laravel mix using npm - laravel already add dependency in package.json file, just run command npm install, it will install laravel mix.
	ii. npm install --save-dev boostrap@next and npm install --save-dev@popper/core
	iii. resource/folderName/app.scss  write : @import ~bootstrap/scss/bootstrap
	iii. resource/folderName/app.js   write : import('boostrap') 
	iii. Open webpack.mix.js file and metioned  css later will processed.
		Example : .scss('resources/js/file.scss', public/css)
		.postCss('resources/css/file.css', public/css)
	iv. open package.json file you will see some command while used that command complied the css and js file etc.
		=> npm run dev : this command will mix all of your css complied and place  in  your public directory (Non-minified code)
		=> npm run prod : like npm run dev functions, but its (minified code)
		=> npm run watch : like npm run dev/prod funtions, but its will be automatically in changing in public folder while changed in resource/css file.

12. Middleware 
	=> inspecting and filtering HTTP request entering your application
	=> All of these created middleware are located : app/Http/Middleware/	
	=> Generate Middleware Command : php artisan make:middleware Middleware Name
	=>  every middleware must be register at : app/Http/Kernal.php

	12.1 Global Middleware : 
		=> if you want to denied your request to every HTTP request( Every Page of Web Application). 
		=> show an custom page like this website is underconstruction
		Example :  
			i. generate an global middleware
			ii. add code in method line 18 :
				  public function handle (){ 
					throw new HttpException(503) // add to top :  use Symfony\Component\HttpKernel\Exception\HttpException;
				  }
			ii. registered thats created global middleware in this line 16 array protected : app/Http/Kernal.php
				\App\Http\Middleware\UnderConstruction::class,
		=> Now You whenever you visit any web page, its showing error 503 ...
		=> You can also created custom error page at : resources/views/errors inside of error folder
		=> Name the file 503.blade.php, add code <h1> Site is under construction</h1>  !Done

		12.2.2 Customize Laravel Design Page Errors 
			i. php artisan vendor:publish --tag=laravel-errors 
			ii. go to : resources/views you will see there is errors folder
			iii. Now You can customize thats 503 error page and other errors page.

	12.2 Route Middleware  
		=>  you can assign specific web page underconstruction or 
		=> Assign middleware specific routes too.
		i. create middleware
		ii. register created middleware at line around 56. protected array $routeMiddleware[]
			"middlewareKeyName"=>\App\Http\Middleware\MiddlewareName::class,
		iii. Assinging Middleware to specific Routes :
			 	Route::get('/profile', [])->middleware('middlewareKeyName')
			 => Multiple Middleware Assign  
			 	Route::get('/profile', [])->middleware(['middlewareKeyName1', 'middlewareKeyName2'])
		=> Now you can customize  those errors page describe at 12.2.2 Customize Laravel Desing Page Errors	

	12.3 Group Middleware :
		=> Assign Multiple Middleware with single key to routes 
		i. create middleware
		ii. register thats middleware at line around 32 protected $middlewareGroups[] array
			"MiddlewareKeyName"=>['\App\Http\Middleware\MiddlewareName1::class','\App\Http\Middleware\MiddlewareName2::class']
		iii.Assinging Middleware to specific Routes :
			 	Route::get('/profile', [])->middleware('middlewareKeyName')

	=> You can assign middleware Multiple routes : 
		Route:middleware(['middlewareKeyName'])->group(function(){
			routes:get();
			reutes:get();
		})

	=> Inside of created middleware public handle method(){} information 
		i. dd($request->user) // return query string 
		ii. Pass extra data through middleware routes : 
			Routes Page : route:get()->middleware('role:admin');
			Created Middleware Page : pass third parameter, you can get "admin" string in middleware page   
			public function handle(Request $request, Closure $next, $role){
				if($role=="guest"){
					return redirect('/');
				}
				return $next($request);
			} 
		iii. checkout : dd($next) or dd($request)

13. Form Management : 
	=> u can create form with csrf at location : resource/view/filename.blade.php
		<form>  @csrf </form>
	=> csrf (Cross-site request fo forgeries) : its proctect from unauthorized access or command line
	=> You may use the @csrf blade directive to generate the hidden token input field. 

	13.1 Accessing Form Data : App\Http\Controller\ControllerName
		i. create form method post with csrf at location : resource/view/signup.blade.php
		ii. php artisan make:Controller SignUpController
			function showform(...){ return view("signup")}
			function signup(...){return view('signup')}
		ii. routes/web.php :
			=> import :  use App\Http\Controllers\ControllerName;
			=>  Route::get('signup',[SignUpController::class,'showForm']);
			=>  Route::post('signup',[SignUpController::class,'signup']); 
		iii. Thereafter lets access form data in controler 
			function signup(Request $request){
					dd($request); // return all requests are comming with form data and might be query string url
					$request->all() // return form data
					$request->input() // return form data
					$request->input('email') or $request->email // return single input form data
					return view('signup')
				}
			=> $request->has('email') or $request->has(['email','name']) return true if data is nullable
			=> if($request->hasAny(['email','name'])){ 
				$name = $request->input('name')
				} // return true if data is not null both of them
			=>if($request->filled(['email','name'])){} // return true if both input filed are exits 
			=>if($request->missing(['email','name'])){} // true : if filed input is not exits
			=> $request->whenHas("email", function($input){}) // check input email exits or not
			=> $request->whenFilled("email", function($input){}) // check input email is nullable or not
			=> Flash Data : after submit form,, access submitted data one session only
				$request->flash();
				$name = $request->old("name);// accessing old data
				
				$request->flashOnly(['name','email']); // flash specific input filed
				$request->flashExcept('password'); // 
				
				Note : flash data show in view file
				return redirect("oldata")->withInput();
				return redirect()->route('routeName')->withInput();
				return redirect('oldata')->withInput($request->except('password'));

				<input... value="{{old("name")}}}"/>
		
		13.1 File Upload
			=> make sure you have define filesystem config url
			<input type="file" name="photo">
			$file = $request->file("photo") or $request->photo;
			i. if($request->file("photo")->isValid()){ //check file is present or not mean successfull uploaded or not} 
			ii. $file->extension();
			iii. $file->path();
			iv. if ($request->hasFile('photo')){ } // check file exist or not
			v. $path = $file->store("images") or $file->store("images", "s3") // store file inside of images folder
				 $path = $file->storeAs("image","newfilane.jpg"); or $file->storeAs("image","newfilane.jpg", "s3");



	13.2 Validation Form : 
		=> Validate the application incoming data form all HTTP Request
		=> if validation rules not pass, your code will stop excutable and return to the user previous url with proper error message response 

		=> Validation Rules : 
			i. accepted : under validation must be "yes", "on", 1, or ture. This is usefull for validating Terms and Service acceptance or similer fields.
			ii. alpha :  All letters must be  alphabetic character
			iii. alpha_dash : Letters must be alpha numeric with dashes and underscores
			iv. alpha_num : All characters must be Numberic. 
			v. array : PHP Array
			vi. boolean : input field must be as  true,  false, 1, 0, "0", "1" 
			vii. confirmed : matching the another input field, like password input, must be same as confirm password input
			viii. date : srtotime php function date
			ix. digits:value : only numeric with length
			x. email : email formating with @
			xi. file : must be under successfully uploaded file 
			xii. filled : input data must exist.
			xiii. image : file must be an image (jpg, jpeg, png, bmp, gif, svg or webp)
			xiv. integer : the field msut be an integer.
			xv. max, min, numeric, requird
			xvi. nullable : field must be null
			xvii. password : must match authenticated user's password
			xviii. string, url
			xix. unique:table, column, excpet, idColumn - the input field must be not exist within the given database table 

		13.2.1 Validate Method :
			App\Http\Controllers\ControllerName.php
			=> Single Rules : public function sign(...){ 
									$request->validate(["email"=>required, "password"=>"required"])}	
			=> Multiple Rules as array 
				1. $request->validate(["email"=>['required','min:20'], "password"=>"required"])
				2. $request->validate(["email"=>'required|min:20', "password"=>"required"])
			=> Send data to view
				return view("viewName", $data=>$oldData)
				view file : 
				@if (isset($data)) @foreach($data as $item) {{$item}} @endforeach @endif

			13.2.2.1 Displaying Validation Errors
				=> An $errors variable alwayas be avaible in your view file, YOu have to just echoing.. :) {{$errors}}
				=> View FIle : 
					i. Retrieving All Error message for all fields :
							@if ($errors->any()) @foreach($errors->all as $message) {{$message}} @endforeach @endif
					ii. Retrieving All Error message for a field
						foreach($errors->get("inputName") as $message){}
					iii. Retrieving the first  Error message for a field
						Controller : 	$errors = $validator->errors();
										echo $errors->first('email');
						View File : @if ($errors->any()) {{$errors->first('inputName')}} @endif //$errors->any() : check if any error exits or not
					iv. @if($errors->has("inputName")) @endif : return true if errors exist.
				
				===> Error Directive
					=> you can use the @error blade directive to quickly determinte if validation error message exist for a given attribute
					=> if those attribute have error, you can display by using echoing $message within @error directive
					Example : <input type="email" name="email" id="email">
								@error("email") {{$message}} @enderror 
					
					i. Modify Default Error Message 
						=> you can customize the Laravel built-in validation rules each an error message at location : resources/lang/en/validation.php file.
					ii. Custom Message for specific attribute (attribute <input name="email">)
						=> customize at line 132 custom associated array : resources/lang/en/validation.php file.
							Example : 'custom' => [ 'email' => [
														'required' => 'We need to know your email address',
														'max' => 'Your email address is to long'
														],],
					iii. customize :attribute Placeholder 
						=> customize at line around 150 'attribute' associated array : resources/lang/en/validation.php file.
						Example: 'attributes' => ["email"=>"email address", "password"=>"best password"],

		13.2.2 Form Request Validation		
			=> generate sperately form validation request  : php artisan make:request RegistrationRequest
			=> The form request class will be placed in the app/Http/Requests directory.
			=> There have two method :

				i. authorize() : this  method will be determine if the user currently authenticated user then perform the validation rules
					public function authorize(){return false} // if this false, unauthorized user can perform validation perform

				ii. rules() : this method is return validation rules that should apply to the request's data.
				public function rules(){
						return ['name'=>"required","email"=>"required|MIN:10","password"=>"required"];}
			
			Directory : app/Http/Requests\RegistrationRequest
			13.2.1 Customizing the error messages
				public function messages(){
						return ['name.required'=>"Please enter the name"];}
			13.2.2. Customizing the validation attributes
				public function attributes(){
						return ['email'=>"email address"];}
			Example : for validation form you have to import RegistrationRequest in controller file 
					 use App\Http\Request\RegistrationRequest;

					 function signup(RegistrationRequest $request){ 
						$request->validated(); 
						return view('signup')}
			Note : check validation ... if error return the user page with errors, thereafter you can display errors via 13.2.2.1 Displaying Validation Errors 

14.  Database configuration
	=> Laravel's database services connection information is located in config/database.php 
	=> Most of the configuratin option in Environment variables.
	=> Running SQL Queries by using DB Facade provides methods for each of type query  : select, update, insert, delete and statement
	=> to use DB Facade method import to controller or whereas you call ing database : use Illuminate\Support\Facades\DB;
				
	14.1 SQL Query 
		i. select("sql query", [parameterOptional]); : return alwayas array of result;
			=> first paramete is sql query and second is binding any parameter binding or where clause constraints
			=> $datas =  DB::select("select * from student") or DB::select("select * from student where id=?",[1])
				or DB::select("select * from student where id=:id",["id"=>1]); 
			=> view file : @foreach ($datas as $data) {{$data->id}} @endforeach

		ii. insert("sql query",[parameterOptional]) 
			Example : insert("insert into student(name, city) value (?,?),['jack',"delhi']") 
					or insert("insert into student(name, city) value (:name,:city),['name'=>'jack','city'=>'delhi']") 
		
		iii. update("sql query", [parameter]) : return number of rows affected by the statement is returned by the method
			Example : update("update student set city =:city where id=:id", ['city'=>'delhi','id'=>5]) 
					or update("update student set city =? where id=?", ['delhi',5]) 
		iv. delete("sql query", [parameter]) : return number of rows affected by the statement 
			Example : delete("delete from student where id=?", [2]);
		v. unprepared statement : run the sql query without binding the any values 
			Example : unprepared("delete from student where id = 2");
					 or unprepared("update  student set city=dhanbad where id = 2");
			Note : its not secured, laravel developer does not recommend to use this method.
		
		vi. Database Transactions : run the set of sql query operation within database transaction function closure, if any operation will be failed, rollback the automatically and thrown an errors.
			Example : DB:transaction(function(){
				update("update student set city =:city where id=:id", ['city'=>'delhi','id'=>5]) 
				insert("insert into student(name, city) value (?,?),['jack',"delhi']") 
			});

		14.2 Query Builder : Laravel's database providing the fluent interface to creating and running database queries.
			=> Its protected your application against SQL Injection attacks because its used behind the PDO Parameter binding operation
			=> There is no need to clean or sanitize strings to passed as query binding
			i. Retrieving all rows from table 
				Example : $students = DB:table('student')->get();

			ii. Retrieving single row/column from a table by using find() Method.
				Example : $students = DB:table('student')->find(5);
						$students = DB:table('student')->first();
						$students = DB:table('student')->where('city', 'bokaro')->first();
						$students = DB:table('student')->where('city', 'bokaro')->value('name') // not sure, please check..


			iii. Retrieving a list of column values
'				Example : $students = DB:table('student')->pluck('column_studnet_name', 'AnotherColumn_name_marks'); // return the value of with associated array,  array(["sonam"=>60, "rahul"=>10])
'							$students = DB:table('student')->pluck('column_studnet_name'); // return only studet colun name valuie...

			iv. Chucking Result : its retrieving data first specific number, then specific number,
				=> its helpful whenever database have lots of million data..
				DB::table('studnet')->orderBy('id')->chuck(3, function($students){  
					echo "check of data <br>";
					foreach($students as $stu){
						echo $stu->name;
						echo "<br>";
					}
				}); 
				data will gets from database 3 by 3..
			
			v. Determine if record exist or not
				Example : 
					if(DB::table('student')->where('id','2')->exists)){ dd('yes')} // return true if exist
					if(DB::table('student')->where('id','2')->doesnExist)){ dd('no')} // return true if data not exist
			
			vi. distinct method : return only different value,, excpet the duplicate values. 
				Example : $student = DB:table('student')->distnict()->get();
					dd($student);
			
			vii. where clause : 
				Example : DB:table('student')->where('id',4)->get(); 
						  DB:table('student')->where('id','=',4)->get();
						  DB:table('student')->where('id','>',4)->get(); // return data which is greater then 4 id
						  DB:table('student')->where('name','like', '%s')->get(); // return only with start with -> s
						-> orWhere
						  DB:table('student')->where('id','=',4)->orWhere('name','==','sonam')->get();	 // return only thats data where are id equal to 4, and name = Soname
						-> whereBetween
						  DB:table('student')->whereBetween('markscolumnName',[10,50])->get(); // return marks data which is 10 to 50
						-> orWhereBetween
						DB:table('student')->whereBetween('markscolumnName',[10,50])->orWhereBetween('id',[2,5])->get(); // return marks data which is 10 to 50 which is id 2 to 5
						-> whereDate
						DB:table('student')->whereDate('pass_datea','2021-03-30')->get();
						-> whereMonth
						DB:table('student')->whereMonth('pass_datea','03')->get();
						-> whereYear
						DB:table('student')->whereYear('pass_datea','2021')->get();
						-> whereDay
						DB:table('student')->whereDay('pass_datea','30')->get();
			
			viii. orderBy 
				Example : DB:table('student')->orderBy('marks','asc')->get();
						 or DB:table('student')->orderBy('id','desc')->get();
			
			viii. latest and oldest : get latest new data and oldest old data
					Example : DB:table('student')->latest('pass_date')->first();
							DB:table('student')->oldest('pass_date')->first();

			ix. inRandomOrder : get random data by primary key, its every time chagned while refresh
				Example :  DB:table('student')->inRandomOrder()->first(); 
							or DB:table('student')->inRandomOrder(); 
			
			ix. GroupBy and having 
				Example :  DB:table('student')->groupBy("marks")->having("marks",">",50)->get(); 
			
			ix. take and skip and limit 
				Example :DB:table('student')->take(5)->get() 
						or DB:table('studen(t')->limit(5)->get(); // get first five datas 

						DB:table('student')->skip(3)->take(5)->get(); 
						DB:table('student')->offset(3)->limit(5)->get();// return first skip 3 data and thereafter 5 get data
						 
			x. insert Data : 
				Example : DB:table('student')->insert(["name"=>'jack', 'email'=>'email@gmail.com'])
						or DB:table('student')->insert([
								["name"=>'jack', 'email'=>'email@gmail.com'], ["name"=>'jack', 'email'=>'email@gmail.com']
							]),
					-> insert or Ignore : if data already exist it will ignore, otherwise added, all column should be fill, because you are using strict mode true,, if this false, then you can leave column rest of column wil be input value 0000
					DB:table('student')->insertOrIgnore(["id"=>10, "name"=>'jack'], ['email'=>'email@gmail.com'])

					-> insertGetId : return last inserted id
						$id = DB:table('student')->insertGetId(["name"=>'jack', 'email'=>'email@gmail.com'])

			xi.update Data : its return affected rows number, its follow rules of insert data 
				Example :  DB:table('student')->where('id','2')->update([
					["name"=>'jack', 'email'=>'email@gmail.com'] ])

				-> updateOrInsert // if data does not exist for update and it will insert...
				DB:table('student')->updateOrInsert([ ["name"=>'jack', 'email'=>'email@gmail.com'],["name"=>'jack', 'email'=>'email@gmail.com'] ])
			
			xii. delete Data : 
				 Example : DB:table('student')->where('id',15)->delete();
				 
				 	-> truncate Method : Delete All Table Data and its helpful for empty our table while our project is complete to host our application or website. 
						DB:table('student')->truncate();

		14.3 Pagniate Method : 
			Example: $student = DB:table('student')->paginate(5); // get all student data and every page have 5 data.
			i. Displaying Pagniation Results : 
					@foreach ($students as $stu) 
							{{$stu->name}} @endforeach
				{{$student->links()}} // generated links for to rest of the page data
			ii. Customizing Pagniation urls
				-> Controller : 
					$students = DB:table('student')->paginate(5);
					$student->withPath('/cs/students')
					return view ('student'. ['students'=>$students])
				-> Route::get('/cs/students/', []);
			
			iii. Simple Paginate : its only "next" and "preview" for change page
				Example : DB:table('student')->simplePaginate(5);
				
			14.3.1 Using bootstrap
				=> Example : DB:table('student')->simplePaginate(5);
				=> Open App\Providers\AppServiceProvider.php then write below code
				=> import use Illuminate\Pagination\Paginator;
					public function boot(){ Paginator::useBootstrap()}
				=> Now Add Bootstrap in your view blade php file for use simple paginate

			14.3.2 Customizing The Pagination View 
				=> you can customize the pagination view via command
				=> php artisan vendor:publish --tag=laravel-pagination
				=> Now You have resource/views/vendor/pagination folder..and you can customize thats file for pagination.. :)
				=> view file : {{$students->links('pagination:bootstrap-4')}}
			
			14.3.3. Paginator Methods : $students = DB:table('student')->paginate(5);
				i. $students->lastPage(): get last page number, Not avaible in simplePaginate($num);
				ii. $students->nextPageUrl() : get next page url
				iii. $students->onFirstPage() : Determine if the paginator is onthe first page
				iv. $students->perPage() : get Number of items showing in one page
				v. $students->previousPageUrl() : back page url 
				vi. $students->total() : Determine the total number of items in database record
				vii. $students->url($page) : get url given the page number
				viii. $students->getPageName(),  ix. setPageName($name) : set the page name
				x. count() : get the number of items in current page, xi. currentPage() : return current page number 
				xii. firstItem() : get the first item from the results data, xiii. getOptions() : get the paginator options 
				xiv. getUrlRange($stat, $end) : create a range of pagination URLS, xv. hasPage() : Determine if there are enough items to split into multiple pages.
				xvi. hasMorePage() : check more items in the data store xvii. items() : get the items from current page
				xviii. lastItem() : return the number of last item from result,  

15. Migrations :  
	=> migration is  like version control for your database for create, update tables and manage  all database scheme columns etc.
	=> Generate Migration : php artisan make:migration create_student_table and located at database/migrations 
	=> migration file contains a timestammp, thats allow laravel to determine order of the migrations
	=> open migrations file timestamp_student file, you will see there two method up and down
		i. public function up(){} method :used to add new tables, columns or indexes to your database
		ii. public function down(){} method : reverse the operation performed by the up method.

	15.1 Command Line
		i. php artisan make:migration create_student_table  // create a new table
		ii. php artisan migrate : run all migrations file of up method 
		iii. php artisan migrate:status  // check which migration is running
		iv. php artisan migrate:rollback // rollback the last batch migration file of down method..
		v. php artisan migrate:rollback --step=5 // rollback the last five batch migration file of down method..
		vii. php artisan migrate:reset // rollback all of your applications migration file
		viii. php artisan migrate:refresh // rollback and migrate all of your applications migration file, thats mean re-create entire database. (first up then down method)
		ix. php artisan migrate:refresh --step=5 // rollback last 5 batch of your applications migration to down mehtod (first up then down method)
		x. php artisan migrate:fresh // drop all tables and migrate the command i. php artisan migrate
		xi. php artisan make:migration create_table_name --table = student // its create with schema;
	
	15.2 Creating Table  with column
		=> up method of migration file function up(){
		Scheme::create('table_name', function(Blueprint $table){ $table->id(), $table->string('name')}); }

		=> Column Types
			1. char() : $table->char('columName',100);
			2.  increments() : $table->increments('column_name') // its primary key..
			3. integer() : $table->integer('column_name')
		Note : avaible columns type  checkout : https://laravel/docs/8.x/migration#availble-column-types

	15.3 Dropping Table
		php artisan make:migration dropping_student_table
		Schema:dropIfExists('tableName');  or Schema:drop('tableName');// up method of migration file function
		php artisan migrate

	=> checking table or column existence : 
		if(Schema::hasTable('tableName')){ // the student table exists}
		if(Schema::hasColumn('tableName', 'column_name')){ // the student table exists and has an email column}
		php artisan migrate
	
	15.4 Renaming Table
		php artisan make:migrations rename_oldTableName_to_newTableName
		Schema::rename('oldTableName', 'newTableName');
		php artisan migrate
	
	15.5 drop Column
		php artisan make:migrations dropping_student_table
		Schema::table('tablename', functino(Blueprint table){
			$table->dropColumn('ColumnName');
		});'
		php artisan migrate
	
	15.6. Column Modifiers : $table->string('ColumnName')-> below said method
		i. default('nothing');
		ii. useCurrentOnUpdate() : update on current timestamp while changing database
		iii. use Current() : set current timestammp while insert data 
		iv. after('column') : Place column after another column
		v. autoIncrement() : set Integer coulmsn as auto-incrementing(primary key);
		vi. chartset('utf8mb4') : specify a character set fo the column 
		vii. commnet('my comment') : add comment to column
		viii. default($value) : set the default value of an column
		ix. first() : place the first column in the table
		x. from($integer) : set the starting value of an auto incrementing (primary key);
		xi. nullable($value=true) : Allow null values to be inserted into the column
		
		15.6.1 Modifying columns
			=> composer require doctrine/dbal 
			=> its helpfull for Modify columns strcuture types like : bigInteger, binary, boolean, date, dateTime, dateTimeTz, decimal, integer, json, longText, mediumText, smallIntger, string, text, time, unsginedBigInteger, unsignedInteger, uninsginedSmallInteger and uuid.
			
			i. Updating Column attributes
				=> php artisan make:migration tableName_col_name --table=tableName
				=> update method of migration file
					Schema::table('student', function(Blueprint $table) { 
						$table->string('name', 50)->change();
					}); 
					down method will its opposite.
				=> php artisan migrate
			ii. Rename columsns
			=> php artisan make:migration oldcolName_to_newcolName --table=tableName
				=> update method of migration file
					Schema::table('tableName', function(Blueprint $table) { 
						$table->rename('oldcolname', 'newcolname');
					}); 
					down method will its opposite.
				=> php artisan migrate
			
			iii. createing Indexs. 
				1. $table->primary('id') 2. $table->primary(['id', 'parent_id']); // add compsite key
				3. $table->unique('email', ''unique_email');  // mean that different value in the table email column
				4. $table->index('state') ;5. $table->spatialIndex('location');
				Example : $table->string("email")->unique();
						$table->index(['account_id', 'created_at']);
				=> Drop Indexs
				 1. $table->dropUnique(['unique_email']); 2. dropPrimary('user_id_primary') 3. dropIndex()
		
		iv. Foreign key Constraints
			Schema::table('course', fucntion(Blueprint $table){
					$table->unsginedBigInteger('stu_id');
					$table->foreign("stu_id")->references)('id')->on("student")
			});
			=> $table->foreignId("stud_id")->constrained();
			=> $table->foreignId("stud_id")->constrained('student');
			=> $table->foreignId("stud_id")->constrained()->onUpdate('cascade')->onDelete('cascade');
			
			1. Dropping Foreign key	
				=> drop foreign key by using name which is auto created by using tableName_columnName_foreign 
				$table->dropForeign("tableName_columnName_foreign");
				or $table->dropForeign(['column_name']);

16. Seeding and Faker
	16.1 Seeding
		=> stored test data in seed classes in database/seeders directory.
		=> By Default One Database Seeder class is already defined in database/seeders directory  for call new created seeders classes 
		16.1 Seeding Commands
			i. php artisan make:seeder ClassName // create new seeder 
			ii. php artisan db:seed // its run method which is inside of Default DatabaseSeeder Class and can be execute multiple seeder classes like below 
			iii. Calling Seeding : 
				datbabase/seeders/DatabaseSeeder
				public function run() { $this->call([NewSeederClass::class,NewSeederClass2::class,NewSeederClass2::class]) } 
			iv. php artisan db:seed --class=StudentSeeder // call the only individual class and its will not run Deafulat Seeder Class
			v.  php artisan migrate:fresh --seed // its drop all database table and re genenerate with seed

		Example : i. php artisan make:seeder StudentSeeder
			  ii. database/seeders/StudentSeeder.php 
				=> import Illuminate\Support\Facades\Hash // use for hasing password
				=> import Illuminate\Support\Facades\Str // use for generate random string
				=> import Illuminate\Support\Facades\DB 
				public function run() {  
					foreach(range(1,10) as $value){
						DB::table('student')->insert([ "name"=>Str::random(10), "email"=>Str::random(10),"password"=>Hash:make(Str::random(10)) ]) }
					} 
			  iii. php artisan db:seed --class=StudentSeeder 
				or php artisan db:seed // if u use this command then you have to mentioned the StudentSeeder class inside of run method in  Default DatabaseSeeder Class
				datbabase/seeders/DatabaseSeeder
				public function run() { $this->call([NewSeederClass::class,NewSeederClass2::class,NewSeederClass2::class]) } 
			iv. Now you have generated 10 user data record randomly in database :)
			
			16.1.1. Faker 
			=> You can generate fake randomly username, email, password, text, title etc. by using faker pakcage
			=>  install : composer require fakerphp/faker and documentation github.com/FakerPHP/Faker
			=>  import use Faker/Factory as Faker;
			Example  :
				follow 16.1 and import use Faker/Factory as Faker;
				$faker= Faker::create();
				foreach(range (1,10), $value){ DB:table('student')->insert([ 	
				"name"=>$faker->name(),  "email"=>$faker->unique->safeEmail(), "password"=>Hash:make($faker->password()) ]) 
				
			
			
17. Eloquent 
	=> an objection relational mapper(ORM) that makes it enojyable to interact with your database
	=> Every database table have model which is used to insert, update and delete records from table as well
	=> All models in app\Models directory 
	
	17.1 Command Line, php artisan make:...
		i. model ClassName 
		ii. model ClassName -migration or model ClassName -m // will create model and  migration
		iii. model ClassName --factory or  model ClassName -f // generate factory and model
		iv. model ClassName  --seed or model ClassName Student --seed // generate model and seeder
		v. model ClassName  --controller or model ClassName Student --c // generate model and controller
		vi. model ClassName -msfc // generate model, seeder, factory and controller 
		vii. model ClassName --pivot // generate pivot model, learn this late..
		
	17.2 Model's Class 
		17.2.1 Rules 
			=> Eloquent assumes that the primary key is an incrementing integer value and if this non-increment, you must define in model as 
				$public $incrementing = false // false mean its non increment value
			=> Eloquent will assume every model has primary key column named --> id
			i.  Change Primary key column name in model by define  protected $primaryKey = "stu_id" 
				=>   if ur primary key is not integer if you have deinfe proctected $keyType = "string"
			i. $protected $timestamp = false // created_at and updated_at column will not create
				=> proctected $dateFormate = 'U' // customize date formate timestamp's model
				=> const CREATED_AT = 'new_name', const UPDATED_AT = 'new_name' // change default name of model's column 
			iii. $protected $connection = 'sqllite'// by default its take from database config. in applicaiton, you can change name by using this method said.
		17.2.2. Fetch Data using Model from Database (ORM) 
			=> Import Model in Controller : use App\Models\Student
			
			i. $student = Student::all // retrieving all records 
			ii. Binding Query Builder, Student::where('city','bokaro')->orderBy('name')->get();
			iii. Student::chuck(5,function($student){  }); // first parameter is number of record you wish to recieve per chunk., 
				=> its reduce memory usage when we have large number of data amount
			
			iv. Single Retrieving 
				=> student::find(1) // retrieve single data by primary key 
				=> $student = Student::where('city','bokaro')->first();  // get first record where city and bokaro available
				 or Student::firstWhere('city','bokaro')
				=> Student::where('marks','<','33')->firstOr(function(){ 
					echo "No student failed in this year"; }); //// if result does not found, execute the closure function
			v. Student::firstOrCreate( 
				['name'=>"Rahul"], 
				['email'=>"email@gmail.com","marks"=>100]) //first parameter will search name if not found, then create new record
			Note : Error fillable property to allow mass assignment ... : you have to mentioned in model as define which column should be allow for before create the new record as : $protected $fillable = ["name","email","marks"]
				
				=> $student = Student::firstOrNew() like above said function but you have save through $student->save() method
			vi. Aggregates Retrieve : count, sum, max and other aggregate methods provide by laravel query builder
				=> $count = Student::where('city','bokaro')->count()
				=> $max = Student::where('city','bokaro')->max()
				
			vii. INSERTS
				=> You have create new model instance and set attribute on the model. Then, call the save method
				$student = new Student;
				$student->name = "jack"; $student->email = "jack@gmail.com"; $student->marks=100;
				$student->save(); // will create also timestamp as create at and updated at column while you call the save method
				or
				$student = Student::create([["name"=>"jack", 'email'=>"email@gmail.com","marks"=>100,]])
				=> You have to set an property in model class : proctected $fillable = ['name', 'email','marks']; // define which columns will accept
				
			viii. UPDATE 
				$student = new Student::find(5);
				$student->name = "jack"; $student->email = "jack@gmail.com"; $student->marks=100;
				$student->save(); //  updated at time will auto update while you call the save method
				=> mass update  
				 Student::where('city','bokaro')->update('marks'=>100);
				 
				 => Student::updateOrCreate(["name"=>"sachin"],['email'=>"email@gmail.com","marks"=>100,]) // search name "sachin", if not found, than its will create new one merge first with second parameter 
				 => proctected $fillable = ['name', 'email','marks']; // define which columns will accept
				
			ix. DELETE
				$student = Student:find(1)->delete(); or $student = Student:find(1); $student->->delete();
				$student = Student:where("city","delhi")->delete();
				or 
				Student::destroy(6);
				=> Delete entire table data	
					Student::truncate();
		
		17.3 Relationship 
			=> Eloquent relationship are defined as methods on your Eloquent model classes.
			=> Type of Relationship
			i. One to One
			ii. One to Many
			iii. Many to Many
			iv. Has One Through
			v. Has many through
			i to ii (Polymorphic) // learn it late

			17.3.1 One to One 
				=> One to one relatinship like husband and wife, girlfriend and boyfriend
				=> Its can be only one parent of one foreign key

				i.  use hasOne method and return its result
					Syntax : hasOne(Model_Class, 'foreign_key', 'local_key');
					Example : 
					HusbandModelClass : public function wife() { return $this->hasOne(WifeClass:class)}
					=> Here We have define husband to wife relation, mean i can access data direct of wife class
					=> but we can access data wife table through husband table data, for thats we have to create inverse relation which is define below :)

				ii. Inverse of One to One Relationship
					Syntax : belongsTo(Model_Class, 'foreign_key', 'owner_key')
					Example : 
					WifeModelClass : public function husband() { return $this->belongsTo(HusbandClass:class)}

		---> Example :
					i. php artisan make:model Customer -mc // generata a migration and controller 
					i. php artisan make:model Mobile -mc // generata a migration and controller 

			iii. generate database via migration file 
				Migration Mobile File :
					public function up(){
						Customer : Schema::create('mobiles', function(Blueprint $table))}{
								$table->id();
								$table->string('model');
								$table->timestamps();
								$table->unsignedBigInteger('customer_id');
								$table->foreign('customer_id')->references('id')->on('customers');
							})
						}

				Migration Customer File :
					public function up(){
						Customer : Schema::create('mobiles', function(Blueprint $table))}{
								$table->id();
								$table->string('name');
								$table->string("email");
								$table->timestamps();
							});
						}
				Terminal : php artisan migrate
			Now You have create two table in database 

			iv. Write the One to One relatinshiop code	
				Customer Model Class : 
					pubilc function mobile(){return $this->hasOne(Mobie::class);}
				
				Mobile Model Class :  reverse relationshipt
					pubilc function mobile(){return $this->belongsTo(Customer::class);}
			
			v. Managing Data in Controller 
				import use App\Models\CustomerModel, use App\Models\CustomerModel
				$mobile = new Mobile();
				$mobile->model = "LG100";
				
				$customer = new Customer();
				$customer->name = "sajid"
				$customer->email = "sajid@gmail.com"
				$customer-save();
				$customer->mobile()->save($mobile); // ->mobile()-> // this is model class mobile() function

				=> $mobile = Customer::find($id)->mobile; // get mobile data using customer id 
				=> $customer = Mobile::find($id)->customer; // get customer data using mobileid , its reverse relatinshiop
				=> $customer = Customer::find($id);
					$customer->mobile()->model; // return ; mobile model from mobile table
			
			7.3.2 One to Many
				=> Whereas the single model is parent to the one or more children
				=> One to Many does not mean you have one author, and  three tables, its mean if you have One Author can be multiple post, and post table can be foreign key author_id many times
				 
				i.  use hasMany method and return its result
					Syntax : hasMany(Model_Class, 'foreign_key', 'local_key');

				ii. Inverse of One to One Relationship
					Syntax : belongsTo(Model_Class, 'foreign_key', 'owner_key')

			7.3.2 Has One Through
				=> Whereas defines a one to one relationship with another another table
				=> Tables
					machanics
					id 	name    	
					1	sajid 
					2	rani
					
					cars  	
					id 	model	mechanic_id    	
					1	i10	1 
					2	Honda	1 
					3	Maruti	2
					
					Owners 	
					id 	model	car_id    	
					1	Sonam	1 
					2	Rahul	2 
					3	SUmit	3
					
					- We cant access direct Owners class through machnics, Now we will use hasThrough()
					
				i.  use hasThrough method and return its result
					Syntax : hasThrough(FinalModelClass, 'IntermediateModelClass', 'foreign_key','local_key');
					=> First parameter : class name wish to access
					=> second parameter : Name of Intermediate Class 
					
					Example : hasThrough(Owner::class, 'Car::class', 'mechanic_id','car_id','id','id'); 
						-mechanic_id : Foreign key on the cars table
						- car_id : Foreign key on the owners table
						-id : local key on the mechanics talbe
						-id : local key on the cars talbe
				Note : if make speratly foreign key name then  you have to use mentioned in the method hasThrough(..) with foreign and local key			
				ii. Inverse of One to One Relationship
					Syntax : belongsTo(Model_Class, 'foreign_key', 'owner_key')
				
			=> if have default foregin key and localkey, you can us 
			Example :
				Mechanic Class : public function owner() {return $this->hasOneThrough(Owner:class, Car:class);}
				$owner = Mechanic::find(mechanic_id)->owner// get owner data based one mechanic id
				
				=> Hasone() Method : 
				$owner = Mechanic::find(mechanic_id)->car->owner// get owner data based one mechanic id
			
			7.3.3. Many to many
				=> Required at least three table for define many to many relation
				=> Tables
					singers
					id 	name    	
					1	sajid 
					2	rani
					
					songs 	
					id 	title		    	
					1	tum hi		
					2	khuch khuch	
					3	Di to hai pgal hai		
					
					song_singers  	
					id 	song_id	singer    	
					1	1	1 
					2	2	3 
					3	1	2
					3	3	2
					
				Syntax : belongsToMany(RelationModelClass, 'IntermediateModelClass', 'foreign_key','foreign_key');
				Example - MODEL 
					SingerFile : public function songs(){ return $this->belongsToMany(Song::class, "singer_songs");}
					SongFile : public function singers(){ return $this->belongsToMany(Singer::class, "singer_songs");}
				CONTROLLER : 
					$singer = new Singer();
					$singer->name = "Tony";
					$singer->save();
					$songids = [1,2];
					$singer->songs()->attach($songids); //
					
				=> Song::find(song_id)->singers; /// get singer based on song id
			For Learn More about this - laravel.com website
			
	17.4 Accessor 
	=> An accesssor transform an Eloquent attribute value when it is accessed attribute like  uppercase, lowercase 
	=> Accessor define in Model Class App\Models\ModelName
		Example : 
			public function getNameAttribute($value){ return ucFirst($value);} //change in while set the data in database 
			public function setCityAttribute($value){ return $this->attributes['city']=$vlaue. ' India';} //change in while getting the data from database 
	17.5 Paginate 
		=> Paginate method automatically takes care of setting the query "limit" and "offset" based on the current page being viewed by user.
		=> Links automatically generate
		Example :
			$student = Student::paginate(5); $student = Student::where("marks", ">", "50")->paginate(5)
			$student = Student::where("marks", ">", "50")->simplePaginate(5);
		=> method will be use as above said title 14.3 

18. Authentication and Authorization
	17.1 Authentication 
		=> is about validating your credentials like username and password to verify your identity
		=>  facilities are made up of "guards" and "providers".
		=>  Guards define define how uses are authenticated for each request
		=> Providers define how users are retrieved from your persistent storage.
		=> authentication files are located at config/auth.php
		=> Three type of authentication
		17.2.1 Laravel Breeze
			=> laravel breeze is a simple and its providing features like, login, registration, password reset etc.
			=> Laravel'breeze layour view blade file is styled with tailwind css
			=>  laravel breeze setup
				i. php artisan migrate
				ii. composer require laravel/breeze:1.9.2 --dev // --dev  install only for just  development purpose 
				iii. php artisan breeze:install //  publish auth and resources
				iv. npm install and npm run dev  
					Error : Error: PostCSS plugin tailwindcss requires PostCSS 8.
					solved : npm uninstall tailwindcss postcss autoprefixer
						npm install -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9

				v. php artisan migrate 
			=> laravel breeze's routes are defined within the routes/auth.php file
			=> BREEZE'S METHOD
				- import lIIumniate\Support\Facades\Auth; 
				i. $user = Auth:user() // get authenticated user infomration
					or From Controller public function(Request $request){ $user = $request->user }
					$name = $user->name
				ii. $id = Auth::id()// get authenticated user id
				iii. import lIIumniate\Support\Facades\Auth;  if(Auth::check()){return true} // if user authenticated return true
				
				iv. Auth Routes  
					=> Route Middleware can be used to only allow authenticated users acccess a given route.
					=> refer to Illuminate\Auth\Middleware\Authenticate class 
					=> auth middleware already registered in your application while install laravel breeze located at App\Http\Kernal.php
				Example : Route:get()->middleware('auth') // only authenticated user can access this route.
				
					i. Redirecting unathorized user 
						=> You can modify :  app\Http\Middleware\Authenticate.php file
						proctected function redirectTo($request){ return route('RouteName'); }
						
					ii. App\Http\Requests\Auth\LoginRequest.php here you can modify some rules like 
						Example 1 : line 75 - change to  $seconds = 100; 
					iii. resources\lang\en\auth.php  here you can change error message which is showing of function in aboe said LoginRequest.php
					
					iv. Logging Out Method :
						=> import use Illuminate\Support\Facades\Auth
						public function logout(Request $request){
							Auth::logout(); 
							$request->session()->invalidate(); // invalid request authenticated
							$request->session()->regenerateToken(); // regenerate csrf token
							return redirect('/');
						}
		17.2.2 Laravel Jetstream
		17.2.3. Laravel Fortify
		
	17.2 Authorization 
		=> process to determine whether the authenticated user has access to the particular resources. 
		=> its check your rights to grant you access to resources like database file, permission etc.
		=> Laravel provides two primary ways of authorizing actions : - 
		
		17.2.1 GATES 
			=> gates are simply closures that determine if a user is authenticated to perofrom a given action
				i. define() ii. allow() iii. denies() iv. forUser() v. any() vi. none() vii authorize() viii. check() ix can() x.cannot() xi. inspect() xii. before() xiii. after()
				i. for View Blade : @can, @cannot, @canany
			17.2.1.1 Writing Gates at App\Providers\AuthServiceProvider 
				import use Illuminate\Support\Facades\Gate
				public function boot(){ 
					$this->registerPolicies();  
					Gate::define('isAdmin', function($user){ if($user==='admin@gmail.com'){ return true;}else {return false;}})
				i. Writing External Gates App\Gates\AdminGate.php
					<?php namepace App\Gates; 
						class AdminGate{
						public function check_admin($user){
						if($user==='admin@gmail.com'){ return true;}else {return false;}
					   }}?>
					=> Now Register your gate in App\Providers\AuthServiceProvider 
						import use Illuminate\Support\Facades\Gate	
						use App\Gates\AdminGate;
						
						public function boot(){  
						$this->registerPolicies();  
						Gate::define('isAdmin',[AdminGate::class, 'check_admin']) }
						
			17.2.1.2 Using Gate via Middleware
				=> Middleware run before incoming request even reaches your route or controller
				=> This middleware  Illumniate\Auth\Middleware\Authorize is assigned the can key in  your App\Http\Kernal.php file class
					Route::get('/post',[PostController::class, 'index'])->middleware(['auth', 'can:isAdmin']);
					
			17.2.1.3 Using Gate via Balde
				=> Display a portion of the page only if user is authorized to perform a given action 
					methdod : @can .. @endcan, @cannot, @canany, @can @elesecan @else @endcan, @cannot @elesecannot @else @endcannot, 
					@canany @elesecanany @else @endcanany
				Syntax :  @can('isAdmin') ... @endcan;
				
			17.2.1.4 Authorizing Action
				=> authorize a action , you should use allow or denies methods provided by the gate facade.
				=> call the gate authorization methods within your application controllers before performe an action :
					use Illuminate\Support\Facades\Gate 
					public function edit($id){
						$post = Post::find($id);
						if(Gate::denies('isAdmin', $post)){
							abort(403, 'You are not authorized'); // 
						}
						return view('editpost',['post'=>$post]);}
					i. if(Gate::forUser($user)->allows('isAdmin', $post)){// the user can update the post}
					ii. if(Gate::forUser($user)->denies('isAdmin', $post)){// the user can not update the post}
					iii. if(Gate::any(['isAdmin','delete-post']), $post)){// user can update or delete post}
					iv. if(Gate::none(['isAdmin','delete-post']), $post)){// user cannot update or delete post}
					
			17.2.1.5 Gate Response
				=> returna more detailed respnose, including error message, so you have to import auth response from ur gate.
					use App\Models\User, use Illumniate\Auth\Response,  use Illumniate\Support\Facades\Gate, 
					Gate::define('edit-setting', function(User $user)){
						return $user->isAdmin ? Response::allow() : Response::deny('YOu must an adminstrator'); });
					}
		17.2.2 POLICIES 
			=> policies like controllers, group logic around a particular model or resource
			=> policies are classess that organize authorization logic around a particular model or resource
				php artisan make:police PostPolicy // generate at App/Polices directory.
				php artisan make:police PostPolicy --model=Post
			=> Polices name must be as model name and policies suffix
			=> Register in  App\Providers\AuthProvider Line around 15
				proctected $policies = [
				Post::class=>PostPolicy:class, 
				'App\Models\Post'=>'App\Policies\PostPolicy'. // it can be write like this
				]
				
			Example : Once Policy has been registered, you have to add methods for each action it authorizates
				use App\Models\Post; use App\Models\User; 
				class PostPolicy { public function isAdmin(User $user){return $user->email ===='admin@gmail.com';} }
				
			i. using Policis via Middleware 
				Route::get('/', [PostController::class, 'index'])->middleware(['auth', 'can:isAdmin', App\Models\Post]);
			ii. using in blade file 
				methods : @can .. @endcan, @cannot, @canany, @can @elesecan @else @endcan, @cannot @elesecannot @else @endcannot, 
					@canany @elesecanany @else @endcanany
				Syntax :  @can('isAdmin') ... @endcan;
			iii. using policies via controller
				=>authorize() : $this->authorize('update',$post);  
						$this->authorize('isAdmin', Post::class); 
				Example - 
				public function isAdmin(User $user){
					return $user->email ? Response::allow() : Response::deny('You do not own this post');
				}
			iv. using policies via user model
				=> App\Models\UserModel have two helpful method i. can and ii. cannot
				if($request->user()->cannot('update',$post)){ abort(403,"ye page unauthorized hai apke liye");}
				if($request->user()->cannot('update',Post::class)){ abort(403,"ye page unauthorized hai apke liye");} 

18. SESSION 
 	=> session config file data stored driver at config/session.php
	=> Serveral great drivers out of box : 
		i. "file" : stored in storage/framework/sessions
		ii. "cookie", : session stored in secure, encrypted cookies
		iii. "database", stored in a relational database
		iv. "memcached/radis", one of these fas stored and cache based stored 
		v. "dynamodb" :  stored in AWS DynamoDB
		vi. "array" : stored in a PHP array and will not persisted

	18.1 Storing Data can be stored as two type : 
		
		18.1.1 Request Instance
			public function show(Reuqest $reuqest){

			i. Retrieve data 
				$request->session)()->put("key","value'); // store session data  
				$request->session()->get('key')
				$request->session()->get('key', "default_value") // if key does not exist, return default value
				$request->session()->get('key', callback) // if key does not exist, call the function
				$request=>session()->all(); // return all session data 

				($reuqest->session()->has('key')){ return true;} // check session data exist or not
				($reuqest->session()->exists('key')){ return true;} // check items is present in session
				($reuqest->session()->missing('key')){ return true;} // check item is not preset in sessiono 
			
			ii. Delete Session Data
				$request->session->forget('key');
				$request->session->forget(['key','key2', 'key3']); // delete multiple key
				$request->session->flush(); // delete all session data 

			iii. Retrieving & Delete item
				$request->session->pull('key', 'default'); // get data and delete from session, if data does not exist, return default value

			}

		18.1.2 Global session Helper
			=> can be in used blade file php 
				session(["kye"=>"value"]); // store data
				session('key') // get data ewz
				session()->forget('key') // delete data

	18.2 flash Data
		=> flash() - store item in the session for the next request
		=> second incoming http request flashed data will immediately delete.
		Example: 
			$request->session()->flash("status", "Task was completed"); // set data
			$request->session()->keep(["username", "email"]); // store data when dont want to delete automatic like flash
			$request->session()->now("status", "Task was completed"); // only for current request

			session('key') // show stored session data and many way of getting session data above said.
	
	18.3 CACHE
		=> cache config file is located at config/cache.php
		=> Serveral great drivers out of box for store cache data : 
			i. "file" : stored in storage/framework/sessions
			ii. "cookie", : cache stored in secure, encrypted cookies
			iii. "database", cache in a relational database
			iv. "memcached/radis", one of these fas stored and cache based stored 
			v. "dynamodb" :  cache stored in AWS DynamoDB
			vi. "array" : cachein a PHP array and will not persisted
		
		18.3. There are two primary way of working with cache data
			18.3.1 Cache Facade 
				=>import for use cache method : Illuminatek\Support\Facades\cache

				i. Store Data
					=> if third parameter time is not preset, then cache will be stored indefinitely/unlilmited_time
						 Cache::put('key','value', $seconds=10);
					=> You can use DateTime for instance representing the desired expired time of the cache item. 
						 Cache::put('key','value', now()->addMinutes(10)); cahce will expired after current time + 10 mint 
					=> Cache::add('key","value",$seconds) // return true if data added, otherwise return false if key is alredy exist.
					=> Cache::forever('key','value'); // item will store permanently, use forget method for remove this cache item
					

				ii. Retrieving Data
					Cache::get("key");
					Cache::get("key","value:"); // if key is not exist return default valuie
					Cache::get('key', callback) // use callback function if key is not exist
					if(Cache::has('key')){ return true} // check item exists or not

					Cache::remember("keys" $seconds, function(){ return DB::table("users")->get();}) // if data does not exist, call the second callback retrieve and store data in cache, it will store permamently

				iii. Delete Cache
					 Cache::forget('key');
					 
					 Cache::put('key','value', 0); delete items using negative number of expiration seconds
					 	or Cache::put("key", "value", -5)
					Cache::flush() // clear entire caches
				
				iv. Retrieve and Delete Item
					Cache::pull("key") // get data and delete data from cache store
			
			18.3.1 Global Cache Helper	
				i. STORE DATA
					cache(['key','value'], $seconds=10)  or Cache(['key','value'], now()->addMinutes(10));
				 	
				ii. RETRIEVE DATA 
					cache("key");
					cache()->remember("key", $seconds, function(){ return DB::table("user")->get()}) // // if data does not exist, call the second callback retrieve and store data in cache, it will store permamently

19. COLLECTIONS
	=> Illumniate\Support\Collection class provides a fluent, convenint wrapper for working with arrays of data.
		
		$collection = collect([1,2,3,4,5,6]); // create colleciton with global helper function
		$colleciton->all() // return an array 
		$collection->avg() // reurn an average value
		$collection->chuck(2) // return two by two array collection 
		
		$collection->map(function($item, $key){
			return $item+2;
		})->all(); // return by adding 2 in every array items
	Note : Learn more for collection in larvel website. : https://laravel.com/docs/8.x/collections

20. Localization  
	=> localization means that your application is localization support multiple languaeg
	=> localization located at directory resources/lang.
	=> You can change default languge of your application in config.php/app.php line around 83 
	=> YOu can modify the default language for a single http request at runtime using the setLocale method. 
		Exmple : https://website.com/hi/Routings and https://website.com/hi/Routings

	=> import use Illuminate\Support\Facades\App;
		App::currentLocale(); // return current locale(langugae)
		if(App::isLocale('en')){ // return true if "en" locale exist. }
	
	20.1 Laravel providing two ways to manage translation string : -
		i.  create subdirectory at resources/lang for each language
		Example : 
			- Set Language which you want to translate your website 
				resource/lang/en/home.php
					<?php  return ["page"=>"HomePage", "home"=>"Home", "about"=>"About", "contact"=>"Contact", "welcome"=> "Welcome :name"]   ?>
				resource/lang/hi/home.php
				<?php  return ["page"=>"GHARPAGE", "home"=>"GHAR", "about"=>"JANKARI", "contact"=>"SAMPARK KRE", "welcome"=> "Swagat hai apka :name"]  ?>

			- Set Route or you can use controller inseated using route callback
				Route::get('/{locale}', function($locale){
					App::setLocale($locale);
					return view("Home");
				}})
			
			- Blade File
				Synatx : {{__('filename.keyName', ["attributeName"=>"value"])__}}
						 {{__('home.home')__}} {{__('home.about')__}} {{__('home.contact')__}}
						 {{__('home.welcome', ["name"=>"Sajid Ali"])__}}
			- Testing
				localhost::Port/hi // return hindi website
				localhost::Port/en // return english website;

		ii. translation string define within JSON file that are placed in resources/lang
			- Set Language
				resources/lang/en.json :
					{"page":"HOme Page", "about":"about", "welcome":"welcome :name"}
				resources/lang/hi.json :
					{"page":"GHAR PAGE", "about":"JANKARI", "welcome":"SWAGAT HAI APKA :name"}
			- rest of step above said 20.1 inside i. 
20. REQUEST and RESPONSE
	20.1 REQUESTS
		public function index(Request $request){
			dd($request);
			=> $request->
				- path(); method(); fullUrl(); header(); bearerToken(); ip(); getAccetableContnetTypes(); 
				- isMethod("GET") // check method is get or not, u can use if() statement
				- header("X-Header-Name", "default") // get header if not exist return default value
				- hasHeader("X-Header-Name") // with if stateent check header exist or not
				- if(accepts("text/html", "application/json")){} // if contents exist , code inside 
				- query("queryname", "defaultValue") // if query value does not exist, return default value rahul
				- if($request->(is("admin/*")){ dd("AdminArea")} // after admin path of route,, its admin area 
	m			- routeIs("admin"); return true if admin route
					route::get()->name(admin.two);
					if($request->isRoute("admin.*"){ dd("AdminArea")else {return "Guest Area"}} 
			}
			LEARN MORE FROM LARAVEL WEB : https://laravel.com/docs/8.x/requests

		20.2 RESPONSE 
				-response("HELLO", 200);
				-response("HELLO", 200)->header("content-type", "text/plain);
				-response("HELLO", 200)->cookie("name", "sonam");
				-response("HELLO", 200)->withoutCookie("name"); send response without cookie key name
				-response()->view("welcome"); // return blade view file
				-response()->view("welcome")->header("content-Type","tex/html"); 
				-response()->json({"name"=>"sonam", "city"=>"delhi"});
21. Redirect 
	public function index(){ 
		- return redirect("routePath") // route::get("routePath",[]);
		- redirect()->route("routeName"); // route::get()->name("routeName");
		- redirect()->away("www.google.com"); // redierct to google.com
		- redierct('/profile')->with("key", "message/value") // use session data for accesss this status message
		- 
		}

22. Laravel API
	=> for example you need an fake api, you can search google for fake api
	=> Import use Illuminate\Support\Facades\Http;
	public function getAppPost(){
		- GET METHOD
			$response = Http::get("https:://jsonplaceholder.typicode.com/posts"); //return get response
			$data = $respnose->collect(); // or $respnose->collect()->all()
		
		- POST METHOD
			$response = Http::post("https:://reqres.in/api/users", ["name"=>"sajid", "job"=>"web dev"]);  // add data to website 
			dd($response->json()); // data with added id 
		
		- PUT  METHOD
			$response = Http::put("https:://reqres.in/api/users'/.$id", ["name"=>"sajid", "job"=>"web dev"]);  // add data to website 
			dd($response->json()); // data with added id 
		
		- DELETE METHOD
			$response = Http::delete("https:://reqres.in/api/users/'.$id");  
			dd($response); // 
	=> $response = Http::get("https:://jsonplaceholder.typicode.com/posts"); //return get response
		dd($response)
		i. $response->body();
		ii. $response->status();
		iii. $response->ok();
		vi. $response->failed();
		v. $response->serverError()
		vi. $response->clientError();
		vii. $response =  http:timeout(5)->get("..") // try five times for get response 
		viii. $response =  http:retry(5,100)->get("..") // try five times after interval 100 milisecons for get response 
		xi.  $response =  http:withHeaders("Content-Type","application/json")->post("..") // 
	
	}

23. Laravel Mail
	23.1 Normal Mail with Laravel with gmail
		i. import to controller use Illuminate\Support\Facades\Mail;				
		ii. create mail.blade.php file inside of view folder 
		iii. Controller
			$data = ["name"=>"Sajid", "data"=>"Hello Sajid"];
				Mail::send("bladefilename",$data, function($message){
					$message->to("israfil123.sa@gmail.com");
					$message->subject("hello Dev");
				});
24. Error handling
	=> You can define all custome error inside of App/Exception/handler.php
	=> you have to config/app.php debug and you can set the APP_DEBUG environment variable in .env file 
		- for developemnt its should true // show errors Execption
		- for production must be false // its hide all error exception error 
	=> create new error : php artisan make:exception ExceptionName;
	=> you can use try and catch method for handle the error 
	=> php artisan vendor:publish --tag=laravel-errors // show all errors and you can customize here
		Example :
				try{
				}catch(\Exception $e){
					return $e->getMessage();
					dd(get_class($e)); // return class name whereas error coming from, now you can import those class and you can custome define each error  catch(RealtionExceptionError $e){ ...}
					return get_class()
				}
	=> abort(404) // you can use this abort helper function at anywehre for redirect the error page 	

	24.1 Custome Error
		i. php artisan make:exception PostNotFoundException
		ii. import those exception in controller file or whereas you want to throw
			try{}catch(PostNotFoundException $e){ throw new PostNotFoundException();}



25. Logging or Logs
	=> Its record of your application performance or action 
	Example 1.  
		i. config.php/loggin.php
			customlog=>["driver"=>"single", "path"=>storage_path('logs/tesing.log'), "level"=>"info"]
		ii. route file
			// Route::get("/user", function(){ \Log::info("This is testing log"); dd("done");})
			Route::get("/user", function(){ 
					\Log::channel("customlog")->info("This is testing log"); })
		iii. run route user and check storage/logs/testing.log 
	
	Example 2. use log with middleware and assign to route
			i. php artian make:middleware LogRoute
			ii. App\Http\Middleware\LogRoute
				use Illuminate\Support\Facades\Log;
				public function handle(Request $request, Closure $next){
					$reponse = $next($request);
					if(app()->environment('local')){
						$log = [
							"URI"=>$request->getUri(),
							"METHOD"=>$request->getMethod(),
							"REQUEST_BODY"=>$request->all(),
							"RESPONSE"=>$request->getContent();
						];
						Log::info(json_encode($log));
					}
				} 
			iii. register thats log middleware  
				App\Http\Kernal.php
				"logroute"=>\App\Http\Middleware\LogRoute::class
			iv. Route::('/user',[])->middleware("logRoute");

			v. While hit the user route its will generate log file directory storage/logs/


26. Conditional Class
	Example : 
		@php $success = false; $error = true; @endphp
		<span @class([ 'p-4', 'text-success'=> $success, 'bg-red'=>$error,])> </span>

27. URL
	=> Helper Method
		i. url()->full() // get full url with query string
		ii. url()->preview)() // get previews request url
		iii. $post = App\Models\Post::find(1); 
				url("posts/{$post->id}")

	=> You can also use all above said method as  use Illuminate\Support\Facades\URL;
		i. URL::current(); // get url without query string
		ii. url::preview();
	
	27.1 Temprorary Routes
		
		27.1.1 Create a new temprorary route
			return URL::TemprorarySignedRoute(
				'unsubscribe',now()->addMinutes(30), ['user'=>1];) // url will expired after 10 mint.
			 
		27.1.2 Validating signed route request
			i. hasValidSignature() // check temprorary or signed route is valid or not
				Route::get("/unsubscribe/{user}, function(){ 
					if(!$request->hasValidSignature()){
						abort(401);
					}
				})->name("unsubscribe);
			ii. ALternative, you may assign the middleware to the route
				- Registered Middleware 
					$routeMiddleware = ["signed"=> \Illumniate\Routing\Middleware\ValidateSignature];
				- Assign to route
				Route::post("/unsubscribe/{user},[])->name("unsubscribe")->middleware("signed");

		27.1.3 Redirecting to route if invalid signed route
			=> if route is expired, laravel redirect to abort(404) http status code page.
			=> You can customize this error in App\Exception\handler.php 
				import use Illumniate\Routing\Exceptions\InvalidSignatureException
				public function register() {
					$this->renderable(function(InvalidSignatureException $e){
						return response()->view("baldeFileName", [], 403);
					})
				}
	27.2 Generate Url via Controller
		$url = action([ControllerName::class, 'methodName'], ["id"=>1]); //  methodName/1;

28. Artisan Command 
	=> php artisan --list // return all laravel artisan commands 
	Example 1. :
		i. php artisan make:command showDB
		ii. Register command : App\Console\Kernal.php 
			use App\Console\Command\showDB
			protected $commands = [Commands\showDB:class];
		iii. App\Console\Command\showDB.php
			$description  = "Show current db";
			public function handle() { $this->info(DB::connection()->getDatabaseName()); }
		iv. php artisan showDB // return current databaseName which you have mentioned in laravel .env file

	Example 2. Cron Job for send mail
		=> its will work on live server while run the once command line
		=> you have to setupt mail configuration in .env file
		i. php artisan make:command SendMailCron --command=test:cron;

		ii. Register command : App\Console\Kernal.php 
			use App\Console\Command\showDB
			protected $commands = [Commands\SendMailCron:class];

			schedule(Schedule $schedule){
				$schedule->command("test:cron")->everyMinute(); 
				
				// everyMinute(), everyFiveMinutes(), Ten, Fifteen, Thirty, hourlyAt(17), daily() dailyAt('13:00'?),
				// twicDaily(1,13); weekly(); weeklyOn(1,"8:00"), monthly(); monthlyOn(1,"15:00"), quarterly(); yearly()
				// timezone("America/New_York');  

			}

		iii. App\Console\Command\SendMailCron.php 
			$signature = "test:cron";
			$description = "send mail per mint.";
			public function handle(){
				$data = array("data"=>"send Mail Cron Test");// Access this data in blade file
				Mail::send("baldefileName",$data,function($message){
					$message->to("usermail@gmail.com");
					->subject("Testing Sending mail");
				});
		
		iv. App\resource\views\BladeFileName.php
			<h1>{{$data}}</h1>
			<i> THanks for use mail service </i> 

		v. php artian schedule:run







			    		

				
				



			






			
