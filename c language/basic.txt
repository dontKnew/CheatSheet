1. Introduction of C Language
    => C is a general-purpose programming language, developed in 1972, and still quite popular.
    => C is very powerful; it has been used to develop operating systems, databases, applications, etc.
    => C is very fast, compared to other programming languages, like Java and Python
    => C is very versatile; it can be used in both applications and technologies

2. Difference between C and C++
    => C++ was developed as an extension of C, and both languages have almost the same syntax
    => The main difference between C and C++ is that C++ support classes and objects, while C does not

3. Installation
    i. download Code Block from the website - http://www.codeblocks.org/.

4. Print First Program
    =>c file name extension is c like filname.c and print the hello world
           #include <stdio.h> // header library thats work for input and output such as printf() function below
           int int main() { //  any code will executed inside of main function
             printf("Hello World!"); // output to the screen
             return 0; // its describe our int main() function has been end;
           }
5. Basic Things of C
    i. \n insert an new line
        Ex 1. #include <stdio.h>
                int int main() {
                  printf("Hello World!\nI am learning C.\nAnd it is awesome!");
                  return 0;
                }
                <output>
                Hello World!
                I am learning C
                And it is awesome!

    ii. \t - give an horizontal tab like keyword tab space
    iii. \\	 - insert a backlash in the screen
    iv. \" - insert the double quotes
        Ex 1.
              printf("They call him \"Johnny\"."); // <output> They call him "Johnny".
6. Comments
    => Any text comments will be ignored by the compiler:
    i. Single line comment used two forward slashes (//).
    ii. Multiline comment start /* and end with */
   Note - Good to know: Before version C99 (released in 1999), you could only use multi-line comments in C.

7. Variable
    => int - store the number without decimal like 19
    => float - store the number with decimal like 19.9
    => char - store single letter such as "B" and char string surround quotes
    Syntax.
        type variableName = value; // int myNum = 15;
    Ex. 1 Overwrite
            int myNum = 20;
            myNum = 15; // new value
    Ex 2. define variable before assign an value
        int myNum;
          myNum = 15;

    7.1 Format Specifiers
        => You can directly display the c programming language variable in printf(myNum);
        => For Display use format specifiers
        => Rules of Before Creating an Variable
            Names can contain letters, digits and underscores
            Names must begin with a letter or an underscore (_)
            Names are case sensitive (myVar and myvar are different variables)
            Names cannot contain whitespaces or special characters like !, #, %, etc.
            Reserved words (such as int) cannot be used as names

        Ex 1.
            int myNum = 5;             // Integer (whole number)
            float myFloatNum = 5.99;   // Floating point number
            char myLetter = 'D';       // Character

            printf("this is my number %d\n", myNum);
            printf("this is my point %f\n", myFloatNum);
            printf("this is first name of letter %c\n", myLetter);

        Ex 2. Declare multiple variable
            int x = 5, y = 6, z = 50;
            int sum = x + y +z;
            printf("%d", sum);
        Ex 3. Assign an same value to all variables at once times
            int x, y, z; x = y = z = 50; // for saving line, we're not using the next line
            printf("%d", x + y + z);



8. Data Types
    => Table of Data Type
       Type        size
       int	    2 or 4 bytes	Stores whole numbers, without decimals
       float	4 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits
       double	8 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits
       char	    1 byte	           Stores a single character/letter/number, or ASCII values
   => Examples
      int myNum = 5; float myFloatNum = 5.99;  char myLetter = 'D';
      char title[] = "Programmer"; // or char title[] = {"P","r","o","g","r","a","m","m","e","r","\0"}; // 0 mean tell the c for its ending string letter
      printf("%d\n", myNum); // <output> 5
      printf("%f\n", myFloatNum); // <output> 5.99
      printf("%c\n", myLetter);// <output> D
      printf("%s\n", myLetter);// <output> Programmers
      printf("%s\n", myLetter[0]);// <output> P

      greetings[0] = 'J'; // Modify String
      printf("%s\n", myLetter[0]);// <output> J

      char txt[] = "We are the so-called \"Vikings\" from the north."; // used of double quotes


9. Constants
    => once define constant variable its can not be changed,
    => recommend to declare a constant variable used uppercase letter
    Ex. 1
        #include <stdio.h>
        CONST SIZE = 10; // u ca also declare here
        int int main() {
          const int BIRTHYEAR = 1980;
          printf("%d", BIRTHYEAR);
          return 0;
        }
    9.1 #Define
        => You can define an variable to use all inside or outside of function like global function
        Ex. 1 define at the top and below line stdio.h
                #define SIZE 14
                #define printf print #printf() function can used as print() but c99 do not support
                #define PI 3.14
10. Operators
    5.1 Arithmetic operators
       =>  +,-,/,&
       => ++ : increment
       => --  :decrement;
       Ex 1.
        #include <stdio.h>
        int int main() {
          int x = 5;
          printf("%d", ++x); // <output> 6;
          return 0;
        }

    5.2 Assignment Operator
        => mean assign an value to a variable
        =>  +,-,/,&
        => &=, |=, ^=,  >>=, <<= - learn its  letter
          Ex. 1
            int x = 10;
          Ex 2. int x = 10;
                x += 5; // Equal to x = 10+5;
    5.3 Comparison Operators
        => ==, !=, > , <, >=(Greater than equal to), <=(Less than equal to )
    5.4 Logical Operators
        => &&, ||, ! (Logical Not)

    => Get size of any variable
        sizeof(variableName)
        Ex 1.
            int myInt;
            printf("%lu\n", sizeof(myInt)); // %lu mean long unsigned int because computer used this data type
    Learn Deeply - https://www.w3schools.com/c/c_operators.php
11. Statements
    6.1. if statement
        Ex. 1
            int myNum = 10; // Is this a positive or negative number?
            if (myNum > 0)
              printf("The value is a positive number.");
            else if (myNum < 0)
              printf("The value is a negative number.");
            else
              printf("The value is 0.");
    6.2 Ternary Operator (Short Hand If...Else)
        Syntax : variable = (condition) ? expressionTrue : expressionFalse;
            Ex 1. int time = 20;
                  (time < 18) ? printf("Good day.") : printf("Good evening.");
    6.3 Switch
        Syntax :
            switch(expression) {
              case x:
                // code block
                break;
              case y:
                // code block
                break;
              default:
                // code block
            }
        Ex. 1
        => Break - if statement found break keyword stop this execution
            int day = 4;
            switch (day) {
              case 6:
                printf("Today is Saturday");
                break;
              case 7:
                printf("Today is Sunday");
                break;
              default: // if case is not found return default value print
                printf("Looking forward to the Weekend");
            }
    6.4 While Loop
        Syntax : while (condition) {
                  // code block to be executed
                }
        Ex 1. int i = 0;
             while (i < 5) {
               printf("%d\n", i);
               i++;
             }

    6.5 Do Loop
        => The do/while loop is a variant of the while loop. This
         => loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
        Ex. 1
           #include <stdio.h>
           int int main() {
              int i = 0;
              while (i < 5) {
                if( i >= 3) {
                     goto outside;
                }
                printf("%d\n", i);
                i++;
              }
           }
   6.6 For Loop
        Syntax : for (statement 1; statement 2; statement 3) {
                   // code block to be executed
                 }
        Ex 1.   int i;
                for (i = 0; i < 5; i++) {
                  printf("%d\n", i); }
        Ex 2.   for (i = 0; i <= 10; i = i + 2) {
                  printf("%d\n", i);
                }
   6.7 goto keywords/statement
        => goto keyword like break keyword which is used to stop the statement
        Ex 1.
           #include <stdio.h>
           int int main() {
             int i = 10;
             do {
               printf("%d\n", i);
               if()
               i++;
             }
             while (i < 5); // if true return 1 to 10 number will display otherwise return 10 only because its first execute then check condition
             return 0;
           }
12. Arrays
    7.1 Single Dimension arrays.
        Ex 1. int myNumbers[] = {25, 50, 75, 100};
                printf("%d", myNumbers[0]); // Outputs 25
        Ex 2. Change Array Element
                int myNumbers[] = {25, 50, 75, 100};
                myNumbers[0] = 33;
                printf("%d", myNumbers[0]);
        Ex 3. Loop in Array
            int myNumbers[] = {25, 50, 75, 100};
            int i;
            for (i = 0; i < 4; i++) {
              printf("%d\n", myNumbers[i]);
            }
        Ex 4. Another Example to create array
            int myNumbers[4]; // Declare an array of four integers:
            // Add elements
            myNumbers[0] = 25;myNumbers[1] = 50;
            myNumbers[2] = 75;  myNumbers[3] = 100;
            printf("%d\n", myNumbers[0]);

    7.1 Multidimensional Array
          7.1.1 Two-Dimensional Arrays (2D Array)
            -> first is row second   columns
                int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };
                1   4    2
                3   6   8
            Ex 1. Access Element of 2D Array - int matrix[row][column]
                int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };
                printf("%d", matrix[0][2]);  // Outputs 2
            Ex 2. Change Element
                int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };
                matrix[0][0] = 9; // 9 placed instead of 1
                printf("%d", matrix[0][2]);  // Outputs 2



13. User Input
    Ex 1.
        // Create an integer variable that will store the number we get from the user
        int myNum;
        printf("Type a number: \n"); // Ask the user to type a number
        scanf("%d", &myNum);  // Get and save the number the user types
        printf("Your number is: %d", myNum);  // Output the number the user typed
    Ex 2.
        // Create a string
        char firstName[30];
        printf("Enter your first name: \n"); // Ask the user to input some text
        scanf("%s", firstName); // Get and save the text
        printf("Hello %s.", firstName); // Output the text

14. Pointers
    => Three way to declare pointer
        i. int* myNum; // Most used
        ii. int *myNum;
        iii. int * myNum;
    Ex 1.
        int myAge = 43;     // An int variable
        int* ptr = &myAge;  // A pointer variable, with the name ptr, that stores the address of myAge

        printf("%d\n", myAge); // Output the value of myAge (43)
        printf("%p\n", &myAge); //// Output the memory address of myAge (0x7ffe5367e044)
        printf("%p\n", ptr); // / Reference: Output the memory address of myAge with the pointer (0x7ffe5367e044)

        printf("%d\n", *ptr); // Dereference: Output the value of myAge with the pointer (43

15. Functions
    => Syntax - void myFunction() {
                  // code to be executed
                }
            - myFunction() is the name of the function
            - void means that the function does not have a return value. if return number used int, if return float used float instead of void
    Ex 1. Create and Call theFunction
        void myFunction() { // Create a function
          printf("I just got executed!");
        }
        int int main() {
          myFunction(); // call the function
          return 0;
        }
        // Outputs "I just got executed!"

    Ex 2. Function Can be Call Multiple Times
            void myFunction() {
              printf("I just got executed!");
            }
            int int main() {
              myFunction();
              myFunction();
              myFunction();
              return 0;
            }

    Ex 3. Function Parameter
        void myFunction(char name[], int age) {
          printf("Hello %s. You are %d years old.\n", name, age);
        }
        int int main() {
          myFunction("Liam", 3);
          myFunction("Jenny", 14);
          myFunction("Anja", 30);
          return 0;
        }
    Ex 4. Return Value
            int myFunction(int x, int y) {
              return x + y;
            }
            int int main() {
              int result = myFunction(5, 3);
              printf("Result is = %d", result);

              return 0;
            }
    15. Declaration and defination
        Ex 1.
            void myFunction(); // Function declaration

            // The main method
            int int main() {
              myFunction();  // call the function
              return 0;
            }
            // Function definition
            void myFunction() {
              printf("I just got executed!");
            }

       Ex 2.
            int myFunction(int, int); // Function declaration
            // The main method
            int int main() {
              int result = myFunction(5, 3); // call the function
              printf("Result is = %d", result);

              return 0;
            }
            // Function definition
            int myFunction(int x, int y) {
              return x + y;
            }
16. Recursion : when function calling the iteself function thats recursion.
    Ex 1.
        int sum(int k);

        int int main() {
          int result = sum(10);
          printf("%d", result);
          return 0;
        }

        int sum(int k) {
          if (k > 0) {
            return k + sum(k - 1);
          } else {
            return 0;
          }
        }

       Note - Output : 55 becuase its calling many times inside of function for until k is become 0;
       Explain : -
        10 + sum(9)
        10 + ( 9 + sum(8) )
        10 + ( 9 + ( 8 + sum(7) ) )
        ...
        10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0)
        10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0 = 55
        Since the function does not call itself when k is 0, the program stops there and returns the result.
17. MATH
    => Include header file : #include <math.h>
    => now you can use math predefined function
       Ex 1.
            #include <stdio.h>
            #include <math.h>
            int int main() {
              printf("%f", sqrt(16)); // 4.000000
              printf("%f", ceil(1.4)); // 2.00000
              printf("%f", floor(1.4)); // 1.000000
              printf("%f", pow(4, 3)); // 4*4*4 =64
              return 0;
            }
    => Other method
           abs(x)	Returns the absolute value of x
           acos(x)	Returns the arccosine of x
           asin(x)	Returns the arcsine of x
           atan(x)	Returns the arctangent of x
           cbrt(x)	Returns the cube root of x
           cos(x)	Returns the cosine of x
           exp(x)	Returns the value of Ex
           sin(x)	Returns the sine of x (x is in radians)
           tan(x)	Returns the tangent of an angle

18. String Methods
    i. strocpy(str1, str2) : second parameter string will copy to first parameter
    ii. strcamp(str1, str2)  : compare two string which is bigger or small and if equal return 0
        Ex 1.
            char str1[100] = "Computer"; #six letter
            char str2[100] = "Laptop" #five letter
            value = strcamp(str1, str2);
            if(value==0){ printf("both string letter is equal")}
            else if(value > 0 ) { printf("first string is bigger than second string") }
            else if(value < 0 ) { printf("first string is small than second string") } #this return negative value
        => stricamp(str1, str2)  : method will work same above said but is will ignore lower and uppercase syntax
        => strncamp(str1, str2, length) : same as above but its will compare two string with specific define third parameter lenght

    iii. strcat(str1, str2): join the two string
    iv. strlwr(str1) : conver uppercase string to lowercase
    v. strrev(str1) : reverse the string letter like hello to olleh
    vi. strspn(str1, str2) : return the position of string where str2 does not match with str1
        char str1[100] = "Computer";
        char str2[100] = "Company"
        value = strspn[n](str1, str2); #return 3 position because str1 = comp and str2 = comp match but thereafter does not match position so return last match position 3
    vii. strncpy("Computer", str2, 3) # copied  3 lenght of Computer <comp> to str2 variable
    viii. strset(str1, str2) : replace the str1 is replace with str2 variable
    ix. strupr(str1) : convert lowercase character to uppercase character




19. Structures
    => Structures (also called structs) are a way to group several related variables into one place.
    => Each variable in the structure is known as a member of the structure.
    => create using struct keyword
    => struct function like object/class
    => Examples
        Ex 1.
            // Create a structure called myStructure
            struct myStructure {
              int myNum;
              char myLetter;
               char myString[30];  // String

            };
            int int main() {
              struct myStructure s1; #struct - is keyowrd, myStrcture is struct name, s1 is varialbe where is assign struct thats varialbe
              s1.myNum = 13; // Assign values to members of s1
              s1.myLetter = 'B';
                # not working this strcpy(s1.myString, "Some text");
                strcpy(s1.myString, "Some text"); #working

              printf("My number: %d\n", s1.myNum);
              printf("My letter: %c\n", s1.myLetter);
              printf("My string: %s", s1.myString);
              return 0;
            }

        Ex 2. Create Multiple Variable Struct
            // Create different struct variables
            struct myStructure s1;
            struct myStructure s2;

            // Assign values to different struct variables
            s1.myNum = 13; s1.myLetter = 'B';
            s2.myLetter = 'C'; s2.myNum = 20;
        Ex 3. Another way to use struct and assign value
            => Order of the inserted value must be same as define in struct
              struct myStructure s1 = {13, 'B', "Some text"};
              printf("%d %c %s", s1.myNum, s1.myLetter, s1.myString);

        Ex. 4 Copy struct
            struct myStructure s1 = {13, 'B', "Some text"};
            struct myStructure s2;
            s2 = s1;

        Ex 5. Best example for used of struct
            struct Car {
              char brand[50];
              char model[50];
              int year;
            };
            int int main() {
              struct Car car1 = {"BMW", "X5", 1999};
              struct Car car2 = {"Ford", "Mustang", 1969};
              struct Car car3 = {"Toyota", "Corolla", 2011};
              printf("%s %s %d\n", car1.brand, car1.model, car1.year);
              printf("%s %s %d\n", car2.brand, car2.model, car2.year);
              printf("%s %s %d\n", car3.brand, car3.model, car3.year);

              return 0;
            }
20.  UNION
    => A union is a special data type available in C that allows to store different data types in the same memory location.
    => inside the union variable call as member of union
    => Union something like that structure
    => Syntax of Union
        union [union tag] {
           member definition;
           member definition;
           ...
           member definition;
        } [one or more union variables];
    => define union with many member function and called through one varialbe
        union Data {
           int i;
           float f;
           char str[20];
        } data; #stored the  value of Union Data Member

    => Examples
        Ex 1.
            #include <stdio.h>
            #include <string.h> #include becasue we want to use string function like strcpy, strlen, strlwer etc.
            union Data {
               int i;
               float f;
               char str[20];
            };
            int main( ) {
               union Data data;
               data.i = 10;
               data.f = 220.5;
               strcpy(data.str, "C Programming");

               printf( "data.i : %d\n", data.i);
               printf( "data.f : %f\n", data.f);
               printf( "data.str : %s\n", data.str);

               return 0;
            }

21. File Handling
    => File Handling is the storing of data in a file using a program.
    => You can perform below said action with a any file -
        - Creating a new file
        - Opening an existing file
        - Reading data from an existing file
        - Writing data to a file
        - Moving data to a specific location on the file
        - Closing the file
    => fopen("file_name", "mode")
        1.first parameter is your filename
        2. second parameter is mode
           i. "r" or "rt" - opens a text file for read only access
           ii. "w" or "wt" - if file not exist create text file for write only access
           iii. "a" or "at" "a++" - text file for appending to a file
           iv. "r+t" - open a text file for read and write access
           v. "w+t" - create text file for read and write access
           vi. "a+t" - opens or create a text file and read access
           Additional for Binary
               i. "rb" - opens a binary file for read only access
               ii. "wb" - create binary file for read and write access
               iii. "ab" - binary file for appending to file
               iv. "r+b" - open an binary for read and write access
               v. "w+b" - create binary for read and write only
               vi. "a+b" - open binary file for read only
    => Examples
    Ex 1. Open a file for read only
        #include <stdio.h>
        int int main(){
           FILE * file; #to access a file for r+w+a, now declare variable as file pointer and use file variable OK like below
           if (file = fopen("hello.txt", "r")){ #hello.txt file must be present in root of folder of command line
              printf("File opened successfully in read mode");
           }
           else
           printf("The file is not present! cannot create a new file using r mode");
           fclose(file); #its best way to close the file when operation its done
           return 0;
        }
    21.1 ANSI C
        => ANSI C provides set  of function for reading writing character by character in file
        => These function are defined in standard library below : -
            i. getc() : read the character from a file
            ii. putc() : write the character to a file
               Syntax -
                    int fgetc(FILE *stream) or int getc(FILE *stream)
                    int fputc(int c, FILE *stream) or int putc(int c, FILE *stream)
       Ex 1.
        #include <stdio.h>
        #define printf display
        int main(){
            FILE *file1;
            FILE *file2;
            int ch;
            if(file1 = fopen("filename.dat", "r")==NULL){
            }else {
                display("Error opening input file\n");
                exit(0);
            }
            if(file2 = fopen("filename.dat", "w")==NULL){
            }else {
                display("Error opening output file\n");
                exit(0);
            }
            while(!feof(file1)){
                ch = getc(file1);
                putc =putc(file2);
            }
            fclose(file1);
            fclose(file2);
        }













